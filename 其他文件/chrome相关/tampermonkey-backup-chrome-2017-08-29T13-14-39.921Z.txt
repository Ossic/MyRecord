{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Search By Image","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":["<all_urls>"],"orig_noframes":null,"orig_run_at":"document-start","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"setting":"s{\"site_list\":{\"Google\":\"https://www.google.com/searchbyimage?image_url={%s}\",\"Baidu\":\"https://image.baidu.com/n/pc_search?queryImageUrl={%s}&fm=result_camera&uptype=paste&drag=1\",\"Bing\":\"https://www.bing.com/images/searchbyimage?cbir=sbi&iss=sbi&imgurl={%s}\",\"TinEye\":\"https://www.tineye.com/search?url={%s}\",\"Yandex\":\"https://yandex.ru/images/search?rpt=imageview&img_url={%s}\",\"Sogou\":\"https://pic.sogou.com/ris?query={%s}&flag=1&drag=0\",\"360 ShiTu\":\"http://st.so.com/stu?imgurl={%s}\",\"SauceNAO\":\"https://saucenao.com/search.php?db=999&url={%s}\",\"IQDB\":\"https://iqdb.org/?url={%s}\",\"3D IQDB\":\"https://3d.iqdb.org/?url={%s}\",\"WhatAnime\":\"https://whatanime.ga/?url={%s}\"},\"site_option\":[\"Google\",\"Baidu\",\"Bing\",\"TinEye\",\"Yandex\",\"Sogou\",\"360 ShiTu\",\"SauceNAO\",\"IQDB\",\"3D IQDB\",\"WhatAnime\",\"WhatAnime\"],\"hot_key\":\"ctrlKey\",\"server_url\":\"//sbi.ccloli.com/img/upload.php\"}","timestamp":"n1500385701443","version":"n4"},"ts":1500385701443},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/2998-search-by-image/code/Search%20By%20Image.user.js","uuid":"1daa6492-f2a0-4d34-9669-333ef5e5ee4b","source":""},{"name":"网盘自动填写密码【增强版】","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http*://*.pcs.baidu.com/*","http*://*.baidupcs.com/*","http*://*:8666/file/*","http*://*.baidu.com/file/*","http*://index.baidu.com/*","http*://*.gov/*","http*://*.gov.cn/*","http*://*.taobao.com/*","http*://*.tmall.com/*","http*://*.alimama.com/*","http*://*.jd.com/*","http://*.ctrip.com/*","https://*.evernote.com/*","https://*.yinxiang.com/*","/^https?://(localhost|10\\.|192\\.|127\\.)/","/https?://www.baidu.com/(?:s|baidu)\\?/","http*://www.zhihu.com/question/*/answers/created"],"orig_includes":["http://*","https://*","http://pan.baidu.com/s/*","http://eyun.baidu.com/s/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332250},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/13463-%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81-%E5%A2%9E%E5%BC%BA%E7%89%88/code/%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81%E3%80%90%E5%A2%9E%E5%BC%BA%E7%89%88%E3%80%91.user.js","uuid":"be95535f-2464-41f9-920d-3d06ec958d2d","source":""},{"name":"YouTube +","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://www.youtube.com/tv*","*://www.youtube.com/embed/*","*://www.youtube.com/live_chat*"],"orig_includes":[],"orig_matches":["*://www.youtube.com/*"],"orig_noframes":true,"orig_run_at":"document-start","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"particleSettings":"s{\"GEN_BTTR_NTF\":true,\"GEN_SUB_LIST\":true,\"GEN_INF_SCRL\":true,\"GEN_BLUE_GLOW\":true,\"GEN_PPOT_ON\":true,\"VID_END_SHRE\":true,\"VID_DFLT_QLTY\":\"auto\",\"VID_PLST_ATPL\":true,\"VID_PLST_RVRS\":true,\"VID_PLR_ALVIS\":true,\"VID_PLR_SIZE_MEM\":true,\"VID_PLR_FIT\":true,\"VID_HIDE_COMS\":\"1\",\"VID_POST_TIME\":true,\"VID_VID_CNT\":true,\"VID_DESC_SHRT\":true,\"VID_PPOT_SZ\":533,\"VID_PLR_HTML5\":true,\"BLK_ON\":true,\"floaterX\":0,\"floaterY\":450,\"firstTime\":false,\"volLev\":50,\"advOpts\":true,\"blacklist\":{\"UC71TWnqZ-l2yhHBsiRnSxVQ\":\"8 Rulez\",\"UCxjXU89x6owat9dA8Z-bzdw\":\"AKB48\",\"UCKOsfT0oEOqPEldCI7-l4EQ\":\"Funny page\",\"UC9AIJzikBwSnssfl9yRatXA\":\"joy and laughter\",\"UCFWDKX2U9KUSOUdH2INchbw\":\"TMON official 티몬\",\"UCB6oDsLmJnSbI4_mwDB6D1g\":\"BB 邦画\",\"UCqXkq2wvR8Sqx9QKQhd4XSg\":\"All Videos\",\"UCBOWvlRS2U6HPyhCz9A7FRA\":\"序傑涂\",\"UCCZS6YMggfiRV_U7NuiNNsg\":\"Ryuuu TV / 學日文看日本\",\"UClO8azO6iBvdH-LU8mfaWhA\":\"hughjazzz\",\"UC2wv9Zx_PxLquEfHDEgkf_A\":\"雀聖哲也みんなの麻雀\",\"UCG1xMCXwpAl-_cgxR4tm3HA\":\"ElectroHouseBangers\",\"UCdf73tvj_Dq5L0kE7zrmztA\":\"Top 10\",\"UCv20Zm_6T753httPhtYZ9rg\":\"Outo Pal\",\"UC8VjGg_gQOtN-GRtuvAysFA\":\"Kid Legetøj\",\"UCZmgzM23I0CQkcR0weB69eg\":\"Classic Spice\",\"UCPfiaSlPeBJX3cLmqxmoZ0w\":\"Leo Xu\"},\"extLang\":{\"zh_CN\":{\"YTSETS\":\"YouTube+ 设置\",\"ADV_OPTS\":\"高级选项\",\"SUB_PLST\":\"播放最新上传的内容\",\"PPOT_OPEN\":\"在弹出窗口中打开\",\"BLCK_ADD\":\"添加到黑名单\",\"BLCK_EDIT\":\"编辑\",\"BLCK_SAVE\":\"保存\",\"BLCK_CLSE\":\"关闭\",\"CNSL_AP\":\"自动播放\",\"CNSL_RPT\":\"循环播放\",\"CNSL_SVTH\":\"打开缩略图\",\"CNSL_SS\":\"画面截图\",\"CNSL_SS_CLS\":\"关闭\",\"CNSL_PPOT\":\"弹出播放视频\",\"CNSL_FLBR\":\"网页全屏模式\",\"CNSL_CINM_MD\":\"影院模式\",\"CNSL_YTSC\":\"YouTube 快捷键列表\",\"PLST_AP\":\"自动播放\",\"PLST_RVRS\":\"倒序排列\",\"SHOW_CMTS\":\"显示评论\",\"HIDE_CMTS\":\"隐藏评论\",\"GLB_IMPR\":\"导入/导出设置\",\"GLB_LOCL_LANG\":\"点击修改 YT+ 语言\",\"GLB_LOCL_LANG_CSTM\":\"本地化\",\"GLB_IMPR_SAVE\":\"保存并加载\",\"GLB_RSET\":\"重置\",\"GLB_RSET_CONF\":\"这将重置YT+的所有设置和黑名单。是否要继续？\",\"GLB_SVE\":\"保存\",\"GLB_SVE_SETS\":\"设置已保存\",\"GLB_RMBL\":\"从黑名单中移除\",\"FTR_DESC\":\"详细了解\",\"GEN\":\"常规\",\"VID\":\"视频\",\"CHN\":\"频道\",\"BLK\":\"黑名单\",\"ABT\":\"关于\",\"HLP\":\"帮助\",\"DNT\":\"捐赠\",\"GEN_TTL\":\"通用设置\",\"GEN_GEN\":\"常规\",\"GEN_LYT\":\"布局\",\"GEN_LOCL_LANG\":\"使用自定义的 YT+ 语言包\",\"GEN_PPOT_ON\":\"启用弹出模式\",\"GEN_DSBL_ADS\":\"禁止视频页面以外的广告\",\"GEN_INF_SCRL\":\"在信息源列表启用无限滚动\",\"GEN_YT_LOGO_LINK\":\"YouTube 标志重定向到订阅页\",\"GEN_SUB_LIST\":\"启用订阅播放列表\",\"GEN_REM_APUN\":\"去除自动播放下一个\",\"GEN_SPF_OFF\":\"禁用动态加载\",\"GEN_HIDE_FTR\":\"隐藏页脚\",\"GEN_BLUE_GLOW\":\"去除点击过的按钮周围的蓝色光圈\",\"GEN_HDE_RECM_SDBR\":\"隐藏推荐频道侧边栏\",\"GEN_HDE_SRCH_SDBR\":\"隐藏搜索结果侧边栏\",\"GEN_HDE_CHN_SDBR\":\"隐藏频道侧边栏\",\"GEN_CMPT_TTLS\":\"在信息源中使用缩略标题\",\"GEN_DSB_HVRC\":\"禁用悬停卡片\",\"GEN_BTTR_NTF\":\"改进的蓝色通知框\",\"GEN_GRID_SUBS\":\"在订阅中使用网格布局\",\"GEN_GRID_SRCH\":\"在搜索结果中使用网格布局\",\"VID_TTL\":\"视频设置\",\"VID_PLR\":\"播放器设置\",\"VID_PLR_LYT\":\"播放器布局\",\"VID_DFLT_QLTY\":\"默认视频质量：\",\"VID_DFLT_QLTY_AUTO\":\"自动\",\"VID_DFLT_QLTY_TNY\":\"144p\",\"VID_DFLT_QLTY_SML\":\"240p\",\"VID_DFLT_QLTY_MDM\":\"360p\",\"VID_DFLT_QLTY_LRG\":\"480p\",\"VID_DFLT_QLTY_720\":\"720p\",\"VID_DFLT_QLTY_1080\":\"1080p\",\"VID_DFLT_QLTY_1440\":\"1440p\",\"VID_DFLT_QLTY_2160\":\"2160p (4k)\",\"VID_DFLT_QLTY_2880\":\"2880p (5k)\",\"VID_DFLT_QLTY_ORIG\":\"4320p (8k)\",\"VID_PLR_ALVIS\":\"阅读评论时保持播放器可见\",\"VID_PLR_ALVIS_WDTH\":\"悬浮播放器宽度\",\"VID_PLR_ALVIS_RST\":\"重设位置\",\"VID_PLR_ALVIS_SCRL_TOP\":\"返回顶部\",\"VID_PLR_ATPL\":\"自动播放视频\",\"VID_LAYT\":\"布局\",\"VID_VID_CNT\":\"显示已上传视频数及链接\",\"VID_POST_TIME\":\"显示视频已发布时间\",\"VID_HIDE_DETLS\":\"隐藏视频详细信息\",\"VID_HIDE_COMS\":\"评论区\",\"VID_HIDE_COMS_SHOW\":\"显示\",\"VID_HIDE_COMS_HIDE\":\"隐藏\",\"VID_HIDE_COMS_REM\":\"去除\",\"VID_END_SHRE\":\"禁用视频结束时的分享面板\",\"VID_PLST\":\"播放列表\",\"VID_PLST_ATPL\":\"启用播放列表的自动播放按钮\",\"VID_PLST_RVRS\":\"启用播放列表的倒序排列按钮\",\"VID_PLR_SIZE_MEM\":\"记住播放模式\",\"VID_VOL_WHEEL\":\"使用鼠标滚轮更改音量\",\"VID_PLR_VOL_MEM\":\"记住音量\",\"VID_PLR_VOL_LDN\":\"禁用 YouTube 响度统一化\",\"VID_PLR_ADS\":\"禁用视频页面中的广告\",\"VID_PLR_ALACT\":\"播放器快捷键始终生效\",\"VID_SUB_ADS\":\"仅启用已订阅频道中视频的广告\",\"VID_PLR_ANTS\":\"禁用注释\",\"VID_PLR_HFR\":\"禁用高帧率 (60fps)\",\"VID_PLR_HTML5\":\"可能时使用 HTML 5 播放器\",\"VID_PLR_CC\":\"禁用字幕和隐藏式字幕\",\"VID_PLR_INFO\":\"启用稍后观看按钮\",\"VID_PLR_FIT\":\"为剧场模式适配页面\",\"VID_PLR_FIT_WDTH\":\"适配页面最大宽度:\",\"VID_PLR_DYN_SIZE\":\"默认视图中禁用播放器动态调节尺寸\",\"VID_DESC_SHRT\":\"小巧的视频描述按钮\",\"VID_TTL_CMPT\":\"缩略视频描述标题\",\"VID_PPOT_SZ\":\"弹出播放器的大小\",\"VID_LAYT_AUTO_PNL\":\"自动展开视频描述\",\"GEN_CHN_DFLT_PAGE\":\"默认的频道页面：\",\"GEN_CHN_DFLT_PAGE_DFLT\":\"默认\",\"GEN_CHN_DFLT_PAGE_VID\":\"视频\",\"GEN_CHN_DFLT_PAGE_PL\":\"播放列表\",\"GEN_CHN_DFLT_PAGE_CHN\":\"频道\",\"GEN_CHN_DFLT_PAGE_DISC\":\"讨论\",\"GEN_CHN_DFLT_PAGE_ABT\":\"关于\",\"BLK_TTL\":\"黑名单设置\",\"BLK_BLK\":\"黑名单\",\"BLK_ON\":\"启用黑名单\",\"ABT_TTL\":\"相关信息和实用链接\",\"ABT_THKS\":\"鸣谢：\",\"ABT_THKS_YEPPHA\":\"，他们的成果给此项目带来了灵感，没有他们，今天这些就不会存在。\",\"ABT_THKS_USERSCRIPT\":\" 使开发和发行第三方软件的任务无比简单。\",\"ABT_THKS_STACKOV\":\" 无价的信息对软件开发做出了巨大贡献。\",\"ABT_INFO\":\"官方页面\",\"ABT_LNK_GHB\":\"GitHub\",\"ABT_LNK_GRFK\":\"Greasy Fork\",\"ABT_LNK_OPNU\":\"OpenUserJS\",\"WLCM\":\"感谢您安装 YouTube+\",\"WLCMSTRT\":\"您可以点击上面的按钮来自定义您的设置\",\"WLCMFTRS\":\"点击这里查看所有特性的介绍\",\"LOCALE\":\"中文 (简体)\",\"lastMod\":1501413695000},\"nextCheck\":1503921634837},\"VID_PLR_VOL_LDN\":true,\"VID_PLR_ATPL\":true,\"theaterMode\":false,\"floaterSnapX\":-1,\"floaterSnapY\":1,\"frame_step\":true}"},"ts":1503316834838},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/9932-youtube/code/YouTube%20+.user.js","uuid":"ede82457-b3a2-43ea-81c3-5abddecdb32c","source":""},{"name":"vipVideos_skipAd","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["https://www.youtube.com/*","http://*.dj92cc.com/*","http://*.yinyuetai.com/*"],"orig_includes":["http*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"unread":"bfalse"},"ts":1492505332259},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/8561-vipvideos-skipad/code/vipVideos_skipAd.user.js","uuid":"a14ad6b2-6bc0-4a60-aee0-1648362bea57","source":""},{"name":"Baidu Tieba: No Login","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://tieba.baidu.com/*","*://www.tieba.com/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332267},"enabled":false,"position":5,"file_url":"https://greasyfork.org/scripts/14151-baidu-tieba-no-login/code/Baidu%20Tieba:%20No%20Login.user.js","uuid":"e5dbaf21-fca1-49be-a143-0d1ce3a257f2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWVzcGFjZSAgIFZBX2kKLy8gQHZlcnNpb24gICAgIDMuMC4wLjIwMTcwMzEwCi8vIEBncmFudCAgICAgICB1bnNhZmVXaW5kb3cKLy8gQG1hdGNoICAgICAgICo6Ly90aWViYS5iYWlkdS5jb20vKgovLyBAbWF0Y2ggICAgICAgKjovL3d3dy50aWViYS5jb20vKgovLyBAcnVuLWF0ICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQG5hbWUgICAgICAgIEJhaWR1IFRpZWJhOiBObyBMb2dpbgovLyBAbmFtZTp6aC1DTiAg55m+5bqm6LS05ZCn77ya5LiN55m75b2V5Y2z5Y+v55yL6LS0Ci8vIEBuYW1lOnpoLVRXICDnmb7luqbotLTlkKfvvJrkuI3nmbvlhaXljbPlj6/nnIvosrwKLy8gQGRlc2NyaXB0aW9uIFZpZXcgQmFpZHUgVGllYmEgd2l0aG91dCBsb2dpbi4KLy8gQGRlc2NyaXB0aW9uOnpoLUNOIOeZvuW6pui0tOWQp+eci+i0tO+8iOWMheaLrOalvOS4realvO+8ieaXoOmhu+eZu+W9leOAggovLyBAZGVzY3JpcHRpb246emgtVFcg55m+5bqm6LS05ZCn55yL6LK877yI5YyF5ous5qiT5Lit5qiT77yJ54Sh6aCI55m75YWl44CCCi8vID09L1VzZXJTY3JpcHQ9PQoKdW5zYWZlV2luZG93Lk9iamVjdC5mcmVlemUgPSBudWxsOwoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uIChldmVudCkgewogIHRyeSB7CiAgICB1bnNhZmVXaW5kb3cuUGFnZURhdGEudXNlci5pc19sb2dpbiA9IDE7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIC8vYWxlcnQoZXJyb3IpOwogIH0KfSwgdHJ1ZSk7Cg=="},{"name":"去广告/去除百度推广以及无用功能","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.baidu.com/s?*","https://m.baidu.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332272},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/19759-%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%8E%BB%E9%99%A4%E7%99%BE%E5%BA%A6%E6%8E%A8%E5%B9%BF%E4%BB%A5%E5%8F%8A%E6%97%A0%E7%94%A8%E5%8A%9F%E8%83%BD/code/%E5%8E%BB%E5%B9%BF%E5%91%8A%E5%8E%BB%E9%99%A4%E7%99%BE%E5%BA%A6%E6%8E%A8%E5%B9%BF%E4%BB%A5%E5%8F%8A%E6%97%A0%E7%94%A8%E5%8A%9F%E8%83%BD.user.js","uuid":"afe87935-ea49-47cd-ab9b-4170bed7611f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDljrvlub/lkYov5Y676Zmk55m+5bqm5o6o5bm/5Lul5Y+K5peg55So5Yqf6IO9Ci8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4xMzAKLy8gQGRlc2NyaXB0aW9uICDljrvmjonnmb7luqbmjqjlub/ku6Xlj4rovqPpuKHmjqjlub8KLy8gQGF1dGhvciAgICAgICBwYXBpcGFwaXBpYSA8c3VuaW5neW9AZ21haWwuY29tPiB0ZWxlZ3JhbTpodHRwczovL3RlbGVncmFtLm1lL3N1bmluZ3lvCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/KgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vbS5iYWlkdS5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIC8vIFlvdXIgY29kZSBoZXJlLi4uCgogICAgdmFyIGxqID0gey8vMeaYr+aJk+W8gAogICAgICAgIHRpbWU6CTUwMDAsLy/lkajmnJ/ml7bpl7Qs5Y2V5L2N5q+r56eSLOW7uuiuriA+PSA1MDAw5q+r56eSKDXnp5IpCiAgICAgICAgaW5mbzoKICAgICAgICB7CiAgICAgICAgICAgIGFkOgkgICAgMSwvL+aOqOW5vwogICAgICAgICAgICByaWdodDogIDEsLy/lj7PovrkKICAgICAgICAgICAgYmFpa2U6CTAsLy/nmb7np5EKICAgICAgICAgICAgaW1nOgkxLC8v5Zu+54mHCiAgICAgICAgICAgIG5ld3M6CTEsLy/mlrDpl7sKICAgICAgICAgICAgdGllYmE6CTEsLy/otLTlkKcKICAgICAgICAgICAgd2luMTA6CTEsLy9XaW4xMAogICAgICAgICAgICB2aWRlbzoJMSwvL+inhumikQogICAgICAgICAgICBjb21pYzoJMSwvL+a8q+eUuwogICAgICAgICAgICBzdG9jazoJMSwvL+iCoeelqAogICAgICAgICAgICBzb2Z0OgkxLC8v6L2v5Lu2CiAgICAgICAgICAgIG1hcDoJMSwvL+WcsOWbvgogICAgICAgICAgICByczoJMCwvL+W6lemDqOaOqOiNkAogICAgICAgICAgICBtX2FkOgkxLy/miYvmnLrmjqjlub8KICAgICAgICB9LAogICAgICAgIHdpZHRoOgk4MDAKICAgICAgICAvKgogICAgICAgIOWkp+S6jui/meS4quWuveW6puWkp+amguWxnuS6jiBwYyDlhbfkvZPoh6rlt7HosIPmlbQKICAgICAgICDlubPmnb/otbAgbS5iYWlkdS5jb20g6L+Z5Liq5Z+f5ZCN5aW95LqGIDpxCiAgICAgICAgKi8KICAgIH07CiAgICBpZihkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoID4gbGoud2lkdGgpCiAgICB7CiAgICAgICAgdmFyIG5hdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzX3RhYiIpOwogICAgICAgIHZhciBuZXdMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgIHZhciBuZXdUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ0dpdGh1YicpOwogICAgICAgIG5ld0xpbmsuYXBwZW5kQ2hpbGQobmV3VGV4dCk7CiAgICAgICAgbmV3TGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCJodHRwczovL2dpdGh1Yi5jb20vcGFwaXBhcGlwaWEvRGVsZXRlLUJhaWR1LUFEIik7CiAgICAgICAgbmF2LmFwcGVuZENoaWxkKG5ld0xpbmspOwogICAgfQogICAgZnVuY3Rpb24gSWRfZGVsKGlkKXskKGlkKS5yZW1vdmUoKTtjb25zb2xlLmxvZyhpZCArICcgPiBkb25lJyk7fQogICAgZnVuY3Rpb24gYmFpZHVfaV9mdWNrX3lvdSgpewogICAgICAgIGlmKGxqLmluZm8uYWQgPT0gMSAmJiBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoID4gbGoud2lkdGgpewogICAgICAgICAgICAvKgogICAgICAgICAgICDpob3lm7rniZvnmq7pspwgKG1kenoKICAgICAgICAgICAg5aSn5qaC5oCd6Lev5bCx5piv6YCa6L+H5p6a5Li+ZGl25p2l5a6e546w6L+H5rukCiAgICAgICAgICAgICovCiAgICAgICAgICAgIHZhciBmdWNrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNvbnRlbnRfbGVmdCIpLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJkaXYiKTsKICAgICAgICAgICAgZm9yKHZhciBpID0gMDtpIDwgZnVjay5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgICAgIHZhciBmX2kgPSBmdWNrW2ldOwogICAgICAgICAgICAgICAgdmFyIGZ1Y2tfdGV4dCA9IGZfaS5pbm5lckhUTUw7CiAgICAgICAgICAgICAgICBpZihmdWNrX3RleHQuaW5kZXhPZign5bm/5ZGKPC9zcGFuPicpID4gLTEgfHwgZnVja190ZXh0LmluZGV4T2YoJ+WFjei0ueWSqOivoicpID4gLTEgLyp8fCBmdWNrX3RleHQuaW5kZXhPZign6KOF6YC8JykgPiAtMSovKS8v5Y+v5Lul5omL5Yqo5re75Yqg5YWz6ZSu6K+NIOW7uuiuruS4pOS4quWtl+S7peS4igogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHZhciBmdWNrX2lkID0gZl9pLmlkOwogICAgICAgICAgICAgICAgICAgIHZhciBmdWNrX3N0eWxlID0gZl9pLnN0eWxlLnZpc2liaWxpdHk7CiAgICAgICAgICAgICAgICAgICAgaWYoZnVja19pZC5pbmRleE9mKCd3cmFwcGVyJykgPiAtMSB8fCBmdWNrX2lkLmluZGV4T2YoJ2NvbnRhaW5lcicpID4gLTEpCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAvL+eZveWQjeWNlQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGZ1Y2tfaWQgPiAwIHx8IGZ1Y2tfc3R5bGUgPT0gJ3Zpc2libGUnKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgSWRfZGVsKCcjJyArIGZ1Y2tfaWQpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnVja19jbGFzc25hbWUgPSBmX2kuY2xhc3NOYW1lOwogICAgICAgICAgICAgICAgICAgICAgICBJZF9kZWwoJy4nICsgZnVja19jbGFzc25hbWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZihsai5pbmZvLnJpZ2h0ID09IDEpe0lkX2RlbCgnI2NvbnRlbnRfcmlnaHQnKTt9Ly/lj7PovrkKICAgICAgICBpZihsai5pbmZvLmJhaWtlID09IDEpe0lkX2RlbCgnLnJlc3VsdC1vcC54cGF0aC1sb2cnKTt9Ly/nmb7np5Eo57uP6aqM44CB57+76K+RKQogICAgICAgIGlmKGxqLmluZm8uaW1nICAgPT0gMSl7SWRfZGVsKCcub3AtaW1nLWNvdmVycy1kZXNrdG9wLWNvbnQnKTt9Ly/lm77niYcKICAgICAgICBpZihsai5pbmZvLm5ld3MgID09IDEpe0lkX2RlbCgnLmMtb2Zmc2V0Jyk7fS8v5paw6Ze7CiAgICAgICAgaWYobGouaW5mby50aWViYSA9PSAxKXtJZF9kZWwoJy5vcC10aWViYS1nZW5lcmFsLW1haW50YWJsZScpO0lkX2RlbCgnLm9wLXRpZWJhLXN0YXItbWFpbnRhYmxlJyk7SWRfZGVsKCcub3AtdGllYmEtZ2VuZXJhbC1sb29rbW9yZS5vcC10aWViYS1nZW5lcmFsLW1haW5wbCcpO30vL+i0tOWQpwogICAgICAgIGlmKGxqLmluZm8ud2luMTAgPT0gMSl7SWRfZGVsKCcub3B0X3NvZnR3YXJlX3Nob3dhcmVhJyk7fS8vV2luMTAKICAgICAgICBpZihsai5pbmZvLnZpZGVvID09IDEpe0lkX2RlbCgnLmMtcm93Lnp4LXR2LXZpZGVvLXRvcGluZm8nKTtJZF9kZWwoJy5vcC16eC1uZXctdHZpZGVvLWRybHQnKTt9Ly/op4bpopEKICAgICAgICBpZihsai5pbmZvLmNvbWljID09IDEpe0lkX2RlbCgnLm9wX2NhcnRvb24uY2xpY2stcGFyZW50LXJld2FyZCcpO30vL+a8q+eUuwogICAgICAgIGlmKGxqLmluZm8uc3RvY2sgPT0gMSl7SWRfZGVsKCcub3Bfc2hhcmVzX3NpbXBsZScpO30vL+iCoeelqAogICAgICAgIGlmKGxqLmluZm8uc29mdCAgPT0gMSl7SWRfZGVsKCcuYy1nYXAtdG9wJyk7fS8v6L2v5Lu2CiAgICAgICAgaWYobGouaW5mby5tYXAgICA9PSAxKXtJZF9kZWwoJy5vcF9tYXBfdHdvcGxhY2VfdGFibGUnKTt9Ly/lnLDlm74KICAgICAgICBpZihsai5pbmZvLnJzICAgPT0gMSl7SWRfZGVsKCcjcnMnKTt9Ly/lupXpg6jmjqjojZAKICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vIOWNjuS4veeahOWIhuWJsue6vyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgaWYobGouaW5mby5tX2FkICAgPT0gMSl7SWRfZGVsKCcuZWNfd2lzZV9hZCcpO0lkX2RlbCgnI2VjX3dpc2VfYWR0b3BudW0nKTtJZF9kZWwoJy5lY19hZHZfbGFzdC5lY19yZXNpdGVtX2NhcmQnKTt9Ly/miYvmnLrnq6/lub/lkYoKICAgICAgICBzZXRUaW1lb3V0KGJhaWR1X2lfZnVja195b3UsIGxqLnRpbWUpOwogICAgfQogICAgYmFpZHVfaV9mdWNrX3lvdSgpOwoKfSkoKTs="},{"name":"百度网盘直接下载助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link*","*://yun.baidu.com/share/link*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332276},"enabled":false,"position":7,"file_url":"https://greasyfork.org/scripts/23635-%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD/code/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD.user.js","uuid":"27f95f39-35db-42c9-a3bf-a471e0071e39","source":""},{"name":"gwdang","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://*.jd.com/*","https://*.jd.com/*","http://*.jd.hk/*","https://*.jd.hk/*","http://*.taobao.com/*","https://*.taobao.com/*","http://*.tmall.com/*","https://*.tmall.com/*","https://*.tmall.hk/*","http://*.yixun.com/*","http://*.51buy.com/*","http://*.yhd.com/*","http://*.suning.com/*","https://*.suning.com/*","http://*.dangdang.com/*","http://*.gome.com.cn/*","http://*.newegg.cn/*","http://*.paipai.com/*","https://*.amazon.com/*","https://*.amazon.cn/*","https://*.amazon.*/*","http://www.kjt.com/*","http://www.kaola.com/*","http://www.tcl.com/*","http://shop.hisense.com/*","http://*.oppo.com/*","http://shop.vivo.com.cn/*","http://www.ebay.com/*","http://t.dianping.com/*","http://*.nuomi.com/*","http://*.meituan.com/*","https://yao.95095.com/*","http://*.feiniu.com/*","http://*.meilishuo.com/*","http://*.mogujie.com/*","http://shop.coolpad.cn/*","http://*.sephora.cn/*","http://*.yesmywine.com/*","http://*.yiguo.com/*","http://*.wanggou.com/*","http://mall.jia.com/*","http://weigou.baidu.com/*","http://*.mi.com/*","http://shop.letv.com/*","http://*.handu.com/*","http://*.taoshu.com/*","http://*.1688.com/*","http://*.muyingzhijia.com/*","http://*.vmall.com/*","http://*.xiji.com/*","http://*.xijie.com/*","http://www.yougou.com/*","http://www.okbuy.com/*","http://*.001town.com/*","http://*.01goo.com/*","http://*.03l.cn/*","http://*.133china.com/*","http://*.139shop.com/*","http://yxp.163.com/*","http://*.168dg.com/*","http://*.186mall.com/*","http://*.18to82.com/*","http://*.1j.cn/*","http://*.22shop.com/*","http://*.24dq.com/*","http://*.24quan.com/*","http://*.258sd.com/*","http://*.2688.com/*","http://*.360buy.com/*","http://*.360hqb.com/*","http://*.360kxr.com/*","http://*.360mart.com/*","http://*.365goba.com/*","http://*.38hzt.com/*","http://*.39ty.com/*","http://*.4inlook.com/*","http://*.5188bag.com/*","http://*.51buy.com/*","http://51buy.com/","http://*.51dg.com/*","http://*.51eng.com/*","http://*.51sheyuan.com/*","http://*.51youpin.com/*","http://*.520eye.com/*","http://*.52shehua.com/*","http://*.5366.com/*","http://t.58.com/*","http://*.58hua.com/*","http://*.5lux.com/*","http://*.5yth.com/*","http://*.6919.com/*","http://*.6sbuy.com/*","http://*.77toy.com/*","http://*.7caihua.com/*","http://*.7cv.com/*","http://*.7sev.com/*","http://*.80ebus.com/*","http://*.8801.net/*","http://*.919it.com/*","http://*.929.cn/*","http://*.942radio.com/*","http://b2c.958shop.com/*","http://*.96128.com/*","http://*.99pto.com/*","http://*.99read.com/*","http://*.9dadao.com/*","http://*.9you.com/*","http://*.afffff.com/*","http://*.ai356.com/*","http://*.aibang.com/*","http://*.aidai.com/*","http://*.aiju.com/*","http://*.aim36.com/*","http://*.aimer.com.cn/*","http://*.aiyingshi.com/*","http://*.aizhigu.com.cn/*","http://*.amazon.cn/*","http://*.anni.com/*","http://*.apabi.com/*","http://*.augshow.com/*","http://*.autosup.com/*","http://*.baiyjk.com/*","http://*.bbesports.com/*","http://*.bookuu.com/*","http://*.bearbuy.com.cn/*","http://*.beautyplus.cn/*","http://*.beifabook.com/*","http://*.benq.com.cn/*","http://*.best1.com/*","http://*.biaoshang.hk/*","http://*.binggo.com/*","http://*.bloves.com/*","http://*.bobomobi.com/*","http://*.bookschina.com/*","http://*.boqii.com/*","http://*.buding.com/*","http://*.buy007.com/*","http://*.buy361.cn/*","http://*.buyfine.net/*","http://*.buynow.com.cn/*","http://*.caistv.com/*","http://*.caomeipai.com/*","http://*.car339.com.cn/*","http://*.car6688.com/*","http://*.carrefour.com.cn/*","http://*.cdream.com/*","http://*.ceetop.com/*","http://*.chashu.cn/*","http://*.chedangjia.com/*","http://*.chengdecs.com/*","http://*.china-gift.com/*","http://*.china-pub.com/*","http://emall.chinapay.com/*","http://*.chinayrs.com/*","http://*.chris-tina.com/*","http://*.clady.com/*","http://*.clinique.com.cn/*","http://*.cncard.com/*","http://*.cnfse.com/*","http://*.colebuy.com/*","http://*.conslive.com/*","http://*.coo8.com/*","http://*.cosize.com/*","http://*.cosme-de.com/*","http://*.ctrip.com/*","http://*.cw100.com/*","http://*.d1.com.cn/*","http://*.daisonghua.com/*","http://*.dangdang.com/*","http://*.daoyao.com/*","http://*.woyo.com/*","http://*.dazhe.cn/*","http://*.dazhongdianqi.com.cn/*","http://*.dianpu.com/*","http://*.didatuan.com/*","http://*.disiqu.cn/*","http://*.dixintong.com/*","http://*.doulaimai.com/*","http://*.dsgoo.com/*","http://*.dtoto.com/*","http://*.duhub.com/*","http://*.duoding.com/*","http://*.e-giordano.com/*","http://*.e-lining.com/*","http://*.e-my.com.cn/*","http://*.easy361.com/*","http://*.ebaimi.com/*","http://*.eboxbuy.com/*","http://*.ebtea.com/*","http://*.ecosme.cn/*","http://*.efeihu.com/*","http://*.ehaier.com/*","http://*.ejia.com/*","http://*.enet.com.cn/*","http://*.enjoyeye.com/*","http://*.epetbar.com/*","http://*.et5155.com/*","http://*.f508.com/*","http://*.fclub.cn/*","http://*.flowerby.com/*","http://*.flowercn.com/*","http://*.gap.cn/*","http://*.godida.com/*","http://*.gome.com.cn/*","http://*.goocctv.cn/*","http://*.goodjd.com/*","http://*.goodnourish.cn/*","http://*.gou3618.com/*","http://*.gouduo.com/*","http://*.gouwulian.com/*","http://*.gouxie.com/*","http://*.goyahome.com/*","http://*.guobuy.com/*","http://*.guopi.com/*","http://*.guuoo.com/*","http://*.hany.cn/*","http://*.happigo.com/*","http://*.hit168.com.cn/*","http://*.hitao.com/*","http://*.homeold.cn/*","http://*.homevv.com/*","http://*.hongkouzi.com/*","http://*.hopebook.net/*","http://*.huachu.com.cn/*","http://*.huimeifang.cn/*","http://*.hw2008.cn/*","http://*.icaifeng.com/*","http://*.icson.com/*","http://*.ideemall.com/*","http://*.ihush.com/*","http://*.iloveyou.com.cn/*","http://*.ilovezuan.com/*","http://*.imeelee.com/*","http://*.inoble.com.cn/*","http://*.inshion.com/*","http://*.ishop.cn/*","http://*.it88.com.cn/*","http://*.itzm.com/*","http://*.iyuyou.com/*","http://*.jiajiajk.com/*","http://*.jiaju.com/*","http://*.jiatx.com/*","http://*.jiayougo.com/*","http://*.jinbaidu.com/*","http://*.jmeishop.com/*","http://*.joyran.com/*","http://*.jsbcmall.com/*","http://*.jtlhome.com/*","http://*.jumei.com/*","http://*.junph.com/*","http://*.justonline.cn/*","http://*.jxdyf.com/*","http://*.k121.com/*","http://*.kadang.com/*","http://*.keede.com.cn/*","http://*.kela.cn/*","http://*.kuaishubao.com/*","http://*.kxtkx.com/*","http://*.ladypk.com/*","http://*.laeibelle.com/*","http://*.lafaso.com/*","http://*.lamiu.com/*","http://*.lancome.com.cn/*","http://*.lashou.com/*","http://*.ledaojia.com/*","http://*.leftlady.com/*","http://*.lenovo.com.cn/*","http://*.lens2005.com/*","http://*.letao.com/*","http://*.leyou.com/*","http://*.leyou.com.cn/*","http://*.lijiababy.com.cn/*","http://*.lijigou.com/*","http://*.likebuy.com/*","http://*.likeface.com/*","http://*.lingshi.com/*","http://*.liqunshop.com/*","http://*.liyi99.com/*","http://*.locknlock.com.cn/*","http://*.lovo.cn/*","http://*.luckigo.com/*","http://*.lusen.com/*","http://*.lyceem.com/*","http://*.m18.com/*","http://*.maichawang.com/*","http://*.maimaike.cn/*","http://*.mamabb.com/*","http://*.mamahao.cn/*","http://*.mangocity.com/*","http://*.manzuo.com/*","http://*.masamaso.com/*","http://*.maxfunbuy.com/*","http://*.maywon.com/*","http://*.mbaobao.com/*","http://*.meici.com/*","http://*.meilele.com/*","http://*.meilieasy.com/*","http://*.meituan.com/*","http://*.menglu.com/*","http://*.mengmai.com/*","http://*.minibuy.com/*","http://*.mmgw.cn/*","http://*.mmuses.com/*","http://*.mobi001.com/*","http://*.mokamall.com/*","http://*.momoyoyo.com/*","http://*.montrosechina.com/*","http://*.mooiee.com/*","http://*.moonbasa.com/*","http://*.motostore.com.cn/*","http://*.mpshow.com.cn/*","http://*.naccoo.com/*","http://*.naguu.com/*","http://*.nayao.com/*","http://*.newegg.com.cn/*","http://*.newgo5.com/*","http://*.nmlch.com/*","http://*.no5.com.cn/*","http://*.nokia.com.cn/*","http://*.nonmin88.com/*","http://*.obuy.cn/*","http://*.ofcard.com/*","http://*.ogage.cn/*","http://*.okbig.com/*","http://*.okbuy.com/*","http://*.okddy.com/*","http://*.okgolf.cn/*","http://*.olomo.com/*","http://*.olympus.com.cn/*","http://*.olymsports.com/*","http://*.ono.com.cn/*","http://*.orange3c.com/*","http://*.ouku.com/*","http://*.ourtasty.com/*","http://*.outice.com/*","http://*.oyego.com/*","http://*.paixie.net/*","http://*.palcent.com/*","http://*.ocj.com.cn/*","http://*.pb89.com/*","http://*.pcarm.com/*","http://*.petyoo.com/*","http://*.pgbao.com/*","http://*.piaoliang100.com/*","http://*.pirateship.com.cn/*","http://*.popyj.com/*","http://*.pupai.cn/*","http://*.purcotton.com/*","http://*.qianxun.com/*","http://*.qingci.com/*","http://*.qinqinbaby.com/*","http://*.qmango.com/*","http://*.qumei.com/*","http://*.quwan.com/*","http://*.qxian.com/*","http://*.rayi.cn/*","http://*.redbaby.com.cn/*","http://*.robam.com/*","http://*.salala.com.cn/*","http://*.samsclub.cn/*","http://*.sanfo.com/*","http://*.sapo.com.hk/*","http://*.sasa.com/*","http://*.sasacity.com/*","http://*.sawbuy.com/*","http://*.shanghai-sports.com/*","http://*.shentop.com/*","http://*.shishangqiyi.com/*","http://*.shjdq.com/*","http://*.shnn.com/*","http://*.shopin.net/*","http://*.shoubiao.com.cn/*","http://*.sigo.cn/*","http://mall.sina.com.cn/*","http://*.sinobuy.cn/*","http://*.skcoo.com/*","http://*.skomart.com/*","http://*.snyun.com/*","http://*.sonmai.cn/*","http://*.sport2008.com.cn/*","http://*.strawberrynet.com/*","http://*.suning.com/*","http://*.sz-esun.com/*","http://*.tao3c.com/*","http://item.taobao.com/*","http://*.taoxie.cn/*","http://*.the365.com/*","http://*.thinkshop.cn/*","http://*.tian10.com/*","http://*.tiantian.com/*","http://*.junph.com/*","http://*.tieyou.com/*","http://detail.tmall.com/*","http://*.togj.com/*","http://*.tooogooo.com/*","http://*.toy90.com/*","http://*.toys365.com/*","http://*.tpy100.com/*","http://*.tuniu.com/*","http://*.tztart.com/*","http://*.ugou.cn/*","http://*.uipmall.com/*","http://*.uiyi.cn/*","http://*.ushan.cn/*","http://*.uushouji.com/*","http://*.uya100.com/*","http://*.vaakav.com/*","http://*.vafox.com/*","http://*.vancl.com/*","http://*.vcotton.com/*","http://*.veedl.com/*","http://*.vegoos.com/*","http://*.venusveil.com/*","http://*.veryok.cn/*","http://*.viccol.com/*","http://*.vipshop.com/*","http://*.vipstore.com/*","http://*.vivian.cn/*","http://*.vjia.com/*","http://*.vnasi.com/*","http://*.voipyeah.com/*","http://*.w1.cn/*","http://*.waipowang.com/*","http://*.wangshanghai.com/*","http://*.wg365.com/*","http://*.winenice.com/*","http://*.wl.cn/*","http://*.womai.com/*","http://*.woye.com/*","http://*.wtaotao.com/*","http://*.wumeiwang.com/*","http://*.x-playboy.com/*","http://*.xiaokang.com/*","http://*.xiaozhuren.com/*","http://*.xinbaigo.com/*","http://*.xindou.com/*","http://*.xing800.com/*","http://*.xinhuabookstore.com/*","http://*.xiu.com/*","http://*.xtpo.cn/*","http://*.xzuan.com/*","http://*.yaja.com.cn/*","http://*.yaofang.cn/*","http://*.yasai.cn/*","http://*.yeecare.com/*","http://buy.yesky.com/*","http://*.yesmytea.com/*","http://*.yesmywine.com/*","http://*.yide.com/*","http://*.yifu.com/*","http://*.yihaodian.com/*","http://*.yintai.com/*","http://*.yinyuehe.net/*","http://*.yjcs.cn/*","http://*.yobrand.com/*","http://*.yoger.com.cn/*","http://*.yoho.cn/*","http://*.yongle.com.cn/*","http://*.yougou.com/*","http://*.youjk.com/*","http://*.yoyo18.com/*","http://*.yumaoclub.com/*","http://*.yyosso.com/*","http://*.zbird.com/*","http://*.zgcbb.com/*","http://*.zm7.cn/*","http://*.zopo.com/*","http://*.ibuying.com/*","http://*.33go.com.cn/*","http://*.xijie.com/*","http://*.nop.cn/*","http://*.asyp.com/*","http://*.sparty.cn/*","http://*.yizhedian.com/*","http://*.lvhezi.com/*","http://*.aishangbaobao.com/*","http://*.sportica.cn/*","http://*.jstsilk.cn/*","http://*.camel.com.cn/*","http://*.cottonpop.net/*","http://*.hyj.com/*","http://*.myxiequ.com/*","http://*.mfplaza.com/*","http://*.do93.com/*","http://*.3guo.cn/*","http://*.yaqifushi.com/*","http://*.trura.com/*","http://*.lbaobao.cn/*","http://*.xiutuan.com/*","http://*.usashopcn.com/*","http://*.ihaveu.com/*","http://*.vipku.com/*","http://*.vipchina.com/*","http://*.fanrry.cn/*","http://*.lesunvip.com/*","http://*.nala.com.cn/*","http://*.miqi.cn/*","http://*.meiribuy.com/*","http://*.pufung.com/*","http://*.xiaoye.com/*","http://*.hmeili.com/*","http://*.oulybuy.com/*","http://*.meifenzi.com/*","http://*.caomeishop.com/*","http://*.meifu360.com/*","http://*.bapashop.com/*","http://*.bulangxiongdi.com/*","http://*.gusubuy.com/*","http://*.opearl.net/*","http://*.ruci.cn/*","http://*.rax.cn/*","http://*.jiuxian.com/*","http://*.maimaicha.com/*","http://*.pinwine.cn/*","http://*.meiweidao.com/*","http://*.okliang.com/*","http://*.365wine.com/*","http://*.jjlg.com.cn/*","http://*.bianlishe.com/*","http://*.epkmall.com/*","http://*.gdcct.com/*","http://*.500ccc.com/*","http://*.me361.com/*","http://*.malatamobile.com/*","http://*.trioo.com/*","http://*.oohdear.com/*","http://*.yaahe.cn/*","http://*.easeeyes.com/*","http://*.dbox.cn/*","http://*.haotehui.com/*","http://*.m6go.com/*","http://*.bianyigo.com/*","http://*.okjee.com/*","http://*.mygeek.cn/*","http://*.tbb.cn/*","http://*.ushare360.com/*","http://*.gqt168.com/*","http://*.konjoy.com/*","http://*.aoliz.com/*","http://*.jianianle.com/*","http://*.akajia.com/*","http://*.miqi.com.cn/*","http://*.lehuimai.com/*","http://*.lifevc.com/*","http://*www.ouku.com/","http://nuomi.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332282},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/code/%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7.user.js","uuid":"3b5e3724-4d06-4ce0-8d8d-d6e3113bbae8","source":""},{"name":"Steam Info","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["steamcommunity.com","store.steampowered.com","www.desura.com"],"orig_excludes":[],"orig_includes":["http://steamdb.sinaapp.com/sync","https://steamdb.steamcn.com/sync"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["steamcommunity.com","steampowered.com","desura.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332287},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/956-steam-info/code/Steam%20Info.user.js","uuid":"ba15c0bc-7d8d-492a-86b0-14cf314fdf5f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0ZWFtIEluZm8KLy8gQG5hbWVzcGFjZSAgIGh0dHA6Ly91c2Vyc2NyaXB0cy5vcmcvdXNlcnMvZGVwYXJzb3VsCi8vIEBkZXNjcmlwdGlvbiDlv6vpgJ/mn6Xor6JTdGVhbea4uOaIj+S/oeaBrwovLyBAaW5jbHVkZSAgICAgaHR0cDovL3N0ZWFtZGIuc2luYWFwcC5jb20vc3luYwovLyBAaW5jbHVkZSAgICAgaHR0cHM6Ly9zdGVhbWRiLnN0ZWFtY24uY29tL3N5bmMKLy8gQGdyYW50ICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vIEB2ZXJzaW9uICAgICAwLjM4Ci8vIEBjb25uZWN0ICAgICBzdGVhbWNvbW11bml0eS5jb20KLy8gQGNvbm5lY3QgICAgIHN0b3JlLnN0ZWFtcG93ZXJlZC5jb20KLy8gQGNvbm5lY3QgICAgIHd3dy5kZXN1cmEuY29tCi8vID09L1VzZXJTY3JpcHQ9PQoKaWYgKGRvY3VtZW50LlVSTCA9PSAnaHR0cHM6Ly9zdGVhbWRiLnN0ZWFtY24uY29tL3N5bmMnIHx8IGRvY3VtZW50LlVSTCA9PSAnaHR0cDovL3N0ZWFtZGIuc2luYWFwcC5jb20vc3luYycpIHsKICAgIGV4ZWMoJ3NldFNjcmlwdFZlcnNpb24oJyArIGFkZHNsYXNoZXMoR01faW5mby5zY3JpcHQudmVyc2lvbikgKyAnKScpOwogICAgdmFyIG5vY2FjaGUgPSAnXz0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwKTsKICAgIGxvYWQoJ2h0dHA6Ly9zdGVhbWNvbW11bml0eS5jb20vbXkvZ2FtZXM/dGFiPWFsbCcsICdvd24nKTsKICAgIGxvYWQoJ2h0dHA6Ly9zdG9yZS5zdGVhbXBvd2VyZWQuY29tL2R5bmFtaWNzdG9yZS91c2VyZGF0YS8/JyArIG5vY2FjaGUsICd1c2VyZGF0YScpOwogICAgbG9hZCgnaHR0cDovL3d3dy5kZXN1cmEuY29tL2dhbWVzL2FqYXgvanNvbi9hbGw/Y29sbGVjdGlvbj10JicgKyBub2NhY2hlLCAnZGVzdXJhJyk7Cn0gZWxzZSB7CiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCJzcmMiLCAiaHR0cHM6Ly9zdGVhbWRiLnN0ZWFtY24uY29tL3N0ZWFtX2luZm8uanMiKTsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKfQoKLy9TY3JpcHQgSW5qZWN0aW9uCmZ1bmN0aW9uIGV4ZWMoZm4pIHsKICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoInR5cGUiLCAiYXBwbGljYXRpb24vamF2YXNjcmlwdCIpOwogICAgc2NyaXB0LnRleHRDb250ZW50ID0gZm47CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7CiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcmlwdCk7Cn0KCi8vTG9hZCB1cmwgYW5kIGNhbGwgcHJvYyBmdW5jdGlvbgpmdW5jdGlvbiBsb2FkKHVybCwgaWQpIHsKICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICBtZXRob2Q6ICJHRVQiLAogICAgICAgIHVybDogdXJsLAogICAgICAgIG9ubG9hZDogZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgZXhlYygncHJvY18nICsgaWQgKyAnKCInICsgYWRkc2xhc2hlcyhyZXNwb25zZS5yZXNwb25zZVRleHQpICsgJyIpJyk7CiAgICAgICAgfQogICAgfSk7Cn0KCi8vQWRkIHNsYXNoZXMgdG8gc3RyaW5nCmZ1bmN0aW9uIGFkZHNsYXNoZXMoc3RyaW5nKSB7CiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcL2csICdcXFxcJykuCiAgICByZXBsYWNlKC9cdTAwMDgvZywgJ1xcYicpLgogICAgcmVwbGFjZSgvXHQvZywgJ1xcdCcpLgogICAgcmVwbGFjZSgvXG4vZywgJ1xcbicpLgogICAgcmVwbGFjZSgvXGYvZywgJ1xcZicpLgogICAgcmVwbGFjZSgvXHIvZywgJ1xccicpLgogICAgcmVwbGFjZSgvJy9nLCAnXFxcJycpLgogICAgcmVwbGFjZSgvIi9nLCAnXFwiJyk7Cn0K"},{"name":"dopekeys","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http*://dopekeys.com/giveaway/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332292},"enabled":false,"position":10,"file_url":"https://gist.githubusercontent.com/kaoyusu/7bf2f0e509eef25f94daf8ade78a2680/raw/dopekeys.user.js","uuid":"2368822f-601d-4483-92cf-fec3c7bf8787","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgZG9wZWtleXMKLy8gQG5hbWVzcGFjZSAgICAgaHR0cDovL2RvcGVrZXlzLmNvbS9naXZlYXdheS1saXN0aW5nLwovLyBAZGVzY3JpcHRpb24gICDnoLTnvZHnq5noh6rliqjohJrmnKwKLy8gQHZlcnNpb24gICAgICAgMC4xLjMKLy8gQGF1dGhvciAgICAgICAgS2FveXUKLy8gQHN1cHBvcnRVUkwgICAgaHR0cDovL3N0ZWFtY24uY29tL3QyMzg2ODctMS0xCi8vIEBkb3dubG9hZFVSTCAgIGh0dHBzOi8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20va2FveXVzdS83YmYyZjBlNTA5ZWVmMjVmOTRkYWY4YWRlNzhhMjY4MC9yYXcvZG9wZWtleXMudXNlci5qcwovLyBAdXBkYXRlVVJMICAgICBodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2thb3l1c3UvN2JmMmYwZTUwOWVlZjI1Zjk0ZGFmOGFkZTc4YTI2ODAvcmF3L2RvcGVrZXlzLnVzZXIuanMKLy8gQGluY2x1ZGUgICAgICAgaHR0cCo6Ly9kb3Bla2V5cy5jb20vZ2l2ZWF3YXkvKgovLyBAcnVuLWF0ICAgICAgICBkb2N1bWVudC1lbmQKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgbm9uY2UgPSAkKCIucGFnZXZpc2l0LWxpbmsiKS5hdHRyKCJkYXRhLW5vbmNlIik7CnZhciBpID0gMCwgZmFpbE51bSA9IDA7CnZhciBwYXNzPWZ1bmN0aW9uKCl7CiAgICB2YXIgdGlkID0gJCh0aGlzKS5kYXRhKCdpZCcpOwogICAgdmFyIHBpZCA9ICQodGhpcykuZGF0YSgnZXZlbnQnKTsKICAgIGlmKCQodGhpcykucGFyZW50cygnLnBhbmVsJykuZmluZCgiLnBhbmVsLWhlYWRpbmcgYSIpLmhhc0NsYXNzKCdkb25lJykpIHJldHVybjsKICAgIHZhciBvcmlnaW4gPSAkKHRoaXMpOwogICAgaWYobm9uY2UgPT09IG51bGwgIHx8IG5vbmNlID09PSB1bmRlZmluZWQgfHwgcGlkID09PSBudWxsIHx8IHBpZCA9PT0gdW5kZWZpbmVkKSByZXR1cm47CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIHVybDogImh0dHA6Ly9kb3Bla2V5cy5jb20vd3AtYWRtaW4vYWRtaW4tYWpheC5waHAiLAogICAgICAgICAgICB0eXBlOiAnUE9TVCcsCiAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgIGFjdGlvbjogJ3NhdmV0YXNrJywKICAgICAgICAgICAgICAgIHRpZCA6IHRpZCwKICAgICAgICAgICAgICAgIHBpZCA6IHBpZCwKICAgICAgICAgICAgICAgIG5vbmNlIDogbm9uY2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICAgICAgZmFpbE51bSsrOwogICAgICAgICAgICAgICAgcmV0cnkoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uZCkgewogICAgICAgICAgICAgICAgaS0tOwogICAgICAgICAgICAgICAgaWYocmVzcG9uZC5Nc2dDb2RlID09ICcxJyAmJiByZXNwb25kLmRhdGEucV9yZXN1bHQpewogICAgICAgICAgICAgICAgICAgIG9yaWdpbi5wYXJlbnRzKCcucGFuZWwnKS5maW5kKCIucGFuZWwtaGVhZGluZyBhIikuYWRkQ2xhc3MoJ2RvbmUnKTsKICAgICAgICAgICAgICAgICAgICBvcmlnaW4uYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZhaWxOdW0rKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHJ5KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LCA1MDAwKmkpOwogICAgaSsrOwp9Owp2YXIgcmV0cnkgPSBmdW5jdGlvbigpewogICAgaWYoaSA8PSAwICYmIGZhaWxOdW0gPiAwICYmIGNvbmZpcm0oZmFpbE51bSArICLkuKrmj5DkuqTlpLHotKUs5piv5ZCm6YeN6K+VPyIpID09PSB0cnVlKSB7CiAgICAgICAgaSA9IDA7CiAgICAgICAgZmFpbE51bSA9IDA7CiAgICAgICAgJCgiW2RhdGEtZXZlbnRdOm5vdCguZGlzYWJsZWQpIikuZWFjaChwYXNzKTsKICAgIH0KfTsKdmFyIGdldE5vbmNlID0gZnVuY3Rpb24oKXsKICAgICQuYWpheCh7CiAgICAgICAgdXJsOiAiaHR0cDovL2RvcGVrZXlzLmNvbS9naXZlYXdheS93b29kbGUtdHJlZS0yLW9yLWEtZGV0ZWN0aXZlcy1ub3ZlbC8iLAogICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYoY29uZmlybSgi6I635Y+W5L+h5oGv5aSx6LSlLOaYr+WQpumHjeivlT8iKSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgZ2V0Tm9uY2UoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oaHRtbCkgewogICAgICAgICAgICBub25jZSA9ICQoaHRtbCkuZmluZCgiLnBhZ2V2aXNpdC1saW5rIikuYXR0cigiZGF0YS1ub25jZSIpOwogICAgICAgICAgICBpZihub25jZSA9PT0gbnVsbCB8fCBub25jZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBpZihjb25maXJtKCLojrflj5bkv6Hmga/lpLHotKUs5piv5ZCm6YeN6K+VPyIpID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgZ2V0Tm9uY2UoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoIltkYXRhLWV2ZW50XTpub3QoLmRpc2FibGVkKSIpLmVhY2gocGFzcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKfTsKaWYobm9uY2UgPT09IG51bGwgfHwgbm9uY2UgPT09IHVuZGVmaW5lZCkgewogICAgZ2V0Tm9uY2UoKTsKfSBlbHNlIHsKICAgICQoIltkYXRhLWV2ZW50XTpub3QoLmRpc2FibGVkKSIpLmVhY2gocGFzcyk7Cn0="},{"name":"Bypass Wait, Code & Login on Websites","options":{"awareOfChrome":true,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["down.lepan.cc","music.baidu.com","yinyueyun.baidu.com","media.store.kugou.com","trackercdn.kugou.com","yinyuetai.com","itwusun.com","self"],"orig_excludes":[],"orig_includes":["http://localhost.cuwcl4c/*","http://jixunmoe.github.io/*","http://123564.com/*","http://m.123564.com/*","http://5xfile.com/*","http://www.5xfile.com/*","http://yun.baidu.com/*","http://pan.baidu.com/*","http://howfile.com/*","http://*.howfile.com/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://namipan.cc/*","http://*.namipan.cc/*","http://10pan.cc/*","http://*.10pan.cc/*","http://66yp.cc/*","http://*.66yp.cc/*","http://123wzwp.com/*","http://*.123wzwp.com/*","http://hiyp.cc/*","http://*.hiyp.cc/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://webhd.xuite.net/*","http://sync.hamicloud.net/*","http://www.yimuhe.com/*","http://douban.fm/*","https://douban.fm/*","http://moe.fm/*","http://music.163.com/*","https://music.163.com/*","http://www.1ting.com/*","http://www.23356.com/*","http://www.app-echo.com/*","http://web.kugou.com/*","https://jixunmoe.github.io/cuwcl4c/config/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"CUWCL4C":"s{\"version\":1,\"bDiaplayLog\":true,\"bUseCustomRules\":false,\"dAria_auth\":0,\"dAria_port\":6800,\"dUriType\":0,\"sAria_dir\":\"D:\\\\Download\\\\\",\"sAria_host\":\"127.0.0.1\",\"sAria_pass\":\"\",\"sAria_user\":\"\",\"sCustomRule\":\"\"}"},"ts":1492505332299},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/2600-%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95/code/%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95.user.js","uuid":"43a0f3f2-e2b2-4454-986a-65ad9fee55ea","source":""},{"name":"AntiAdware","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http*://*180upload.com/*","http*://*4upfiles.com/*","http*://*get*.adobe.com/*flashplayer/*","http*://*get*.adobe.com/*reader/*","http*://*afterdawn.com/software/*","http*://*akafile.com/akago.php","http*://*chip.de/downloads/*","http*://*clicknupload.com/*","http*://*cloudyvideos.com/*","http*://*coolrom.com/*/*","http*://*clipconverter.cc/download/*","http*://*dailyuploads.net/*","http*://*datafilehost.com/d/*","http*://*davvas.com/*","http*://*d-h.st/*","http*://*download.cnet.com/*","http*://*telecharger.cnet.com/*","http*://*descargar.cnet.com/*","http*://*de.download.cnet.com/*","http*://*filefactory.com/file/*","http*://*filescdn.com/*","http*://*filehippo.com/*download*","http*://*freewarefiles.com/downloads_counter.php*","http*://*google.*/earth/download/ge/agree.html","http*://*hugefiles.net/*","http*://*hulkload.com/*","http*://*kingfiles.net/*","http*://*letitbit.net/download/*","http*://*loveroms.com/*","http*://*up.media1fire.com/*","http*://*mightyupload.com/*","http*://*mp3fil.*/get/*","http*://*mp3juices.to/*","http*://*mp3olimp.net/*","http*://*mp3olimpz.com/*","http*://*opensubtitles.org/*/subtitles/*","http*://*revclouds.com/*","http*://*romhustler.net/download/*","http*://*romhustler.net/rom/*","http*://*secureupload.eu/*","http*://*sendspace.com/file/*","http*://*sharebeast.com/*","http*://*shared.com/*","http*://*softm8.com*","http*://*.softonic.*","http*://*sourceforge.net/*","http*://*tusfiles.net/*","http*://*unlimitzone.com/*","http*://*uploading.com/*","http*://*uplod.ws/*","http*://*uploads.to/*","http*://*uptobox.com/*","http*://*userscdn.com/*","http*://*ziddu.com/downloadfile/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332306},"enabled":false,"position":12,"file_url":"https://greasyfork.org/scripts/4294-antiadware/code/AntiAdware.user.js","uuid":"d6306d94-cb9f-48c7-92b3-9f6d851273cd","source":""},{"name":"琉神转","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["tts.baidu.com"],"orig_excludes":[],"orig_includes":["http*://www.hacg.*/wordpress/*","http*://hacg.*/wordpress/*","http*://www.hacg.*/wp/*","http*://hacg.*/wp/*","http*://www.hacg.lol/*","http*://hacg.lol/*","http*://hacg.riwee.com/*","http*://hacg.me/*","http*://hacg.in/*","http*://hacg.be/*","http*://hacg.club/*","http*://hacg.li/*","http*://hacg.fi/*","http*://hacg.red/*","http*://hacg.la/*","http*://hacg.tw/*","http*://hacg.at/*","http*://hacg.ch/*","http*://llss.*","http*://www.llss.*","http*://www.acgpy.com/*","http*://blog.reimu.net/*","http*://pan.baidu.com/share/*","http*://pan.baidu.com/s/*","http*://sexacg.com/*","http*://www.acg.tf/*","http*://acg.tf/*","http*://www.moxacg.com/*","http*://moxacg.*","http*://*.acggj.com/*","http*://acg12.com/*","http*://*.acg12.com/*","http*://www.acgnz.cc/*","http*://nacg.me/*","http*://www.tianshit.com/*","http*://www.oomoe.moe/*","http*://www.kaze5.com/*","http*://www.acg15.com/*","http*://www.acglover.top/*","http*://lifanmoe.com/*","http*://www.idanmu.*","http*://*.sijihuisuo.club/*","http*://sijihuisuo.club/*","http*://acg18.us/*","http*://*.acg18.us/*","http*://*.acg44.com/*","http*://zuiacg.*","http*://www.zuiacg.*","http*://www.galacg.me/*","http*://cangku.in/*","http*://www.mhecy.com/*","http*://acgzone.org/*","http*://www.acgzone.org/*","http*://uraban.me/*","http*://www.uraban.me/*","http*://acgmoon.*","http*://www.jiyue.*","http*://www.moe-acg.*/*","http*://huan.moe*","http*://www.mygalgame.com/*","http*://htai.*","http*://gmgard.com/*","http*://*.gmgard.com/*","http*://www.kou.moe/*","http*://www.91moe.com/*","http*://cefamilie.com/*","http*://yui-nya.com/*","http*://www.l-sj.cc/*","http*://htacg.cc/*","http*://www.htacg.cc/*","http*://www.xiu.moe/*","http*://www.cld1.net/*","http*://sjhs*.*","http*://www.dakashangche.*","http*://sleazyfork.org/*/scripts/*","http*://greasyfork.org/*/scripts/*","http*://sleazyfork.org/*/forum/*discussion*","http*://greasyfork.org/*/forum/*discussion*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332316},"enabled":true,"position":13,"file_url":"https://sleazyfork.org/scripts/23316-%E7%90%89%E7%A5%9E%E8%BD%89/code/%E7%90%89%E7%A5%9E%E8%BD%89.user.js","uuid":"4d47e2bd-60b6-4fc3-8c85-69bae6929da1","source":""},{"name":"挊","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://avio.pw/*","http*://avso.pw/*","http*://avxo.pw/*","http*://www.av28.com/*/movie/*","http*://*javlibrary.com/*","http*://*javlib.com/*","http*://*javl10.com/*","http*://*jav11b.com/*","http*://www.libredmm.com/products/*","http*://www.javbus.com/*","http*://www.javbus.me/*","http*://www.javbus2.com/*","http*://www.javbus3.com/*","http*://www.javbus5.com/*","http*://www.icpmp.com/fanhao/*.html","http*://blog.jav4you.com/*","http*://*1pondo.tv/*/index.htm","http*://www.dmm.co.jp/digital/videoa/*","http*://www.jade-net-home.com/products/*","http*://pan.baidu.com/disk/home*","http*://115.com/?tab=offline&mode=wangpan","http*://www.furk.net/users/files/add"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":["btso.pw","btdb.in"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"magnet":"s","search_index":"s0"},"ts":1498566512486},"enabled":false,"position":14,"file_url":"https://sleazyfork.org/scripts/8392-%E6%8C%8A/code/%E6%8C%8A.user.js","uuid":"20d1cb55-a733-4bc4-9be3-81a084ab1875","source":""},{"name":"JAV老司机","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_prototypes":true,"compat_uW_gmonkey":false,"compat_wrappedjsobject":true,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["blogjav.net","pixhost.org","115.com","btso.pw","btdb.to","sukebei.nyaa.si","btkitty.pet","www.torrentkitty.tv","btlibrary.pw","ja14b.com"],"orig_excludes":[],"orig_includes":["http*://*javlibrary.com/*","http*://*javlib.com/*","http*://*5avlib.com/*","http*://*look4lib.com/*","http*://*javlib3.com/*","http*://*javli6.com/*","http*://*j8vlib.com/*","http*://*j9lib.com/*","http*://*jav11b.com/*","http*://*ja14b.com/*","http*://*13vlib.com/*","https://www.javbus.com/*","https://www.javbus2.com/*","https://www.javbus3.com/*","https://www.javbus5.com/*","https://www.javbus.me/*","http*://www.javbus.com/*","http*://*avmo.pw/*","http*://*avio.pw/*","http*://*avso.pw/*","http*://*avxo.pw/*","http://115.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"jav_user_id":"n0","magnet":"onull","search_index":"s1"},"ts":1502177211376},"enabled":true,"position":15,"file_url":"https://sleazyfork.org/scripts/25781-jav%E8%80%81%E5%8F%B8%E6%9C%BA/code/JAV%E8%80%81%E5%8F%B8%E6%9C%BA.user.js","uuid":"1696c29f-d36d-4961-ad52-e8e4ec7a7194","source":""},{"name":"222号巴士通票","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*://*avbus77.com/*op=view*","*://*avbus888.com/*op=view*","*://*bus222.com/*op=view*","*://*gogo5577.com/*op=view*","*://*gogo5588.com/*op=view*","*://*gogo7777.com/*op=view*","*://*gogo8866.com/*op=view*","*://*gogo8888.com/*op=view*","*://*jav513.com/*op=view*","*://*jav513.me/*op=view*","*://*kkk551.com/*op=view*","*://*mmav33.com/*op=view*","*://*uukk8811.com/*op=view*","*://*uukk8877.com/*op=view*","*://*uukk8888.com/*op=view*","*://*uuu557.com/*op=view*","*://*v101.co/*op=view*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332331},"enabled":false,"position":16,"file_url":"https://sleazyfork.org/scripts/26927-222%E5%8F%B7%E5%B7%B4%E5%A3%AB%E9%80%9A%E7%A5%A8/code/222%E5%8F%B7%E5%B7%B4%E5%A3%AB%E9%80%9A%E7%A5%A8.user.js","uuid":"27095457-e424-490c-9e89-a098f31edfba","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAyMjLlj7flt7Tlo6vpgJrnpagKLy8gQG5hbWVzcGFjZSAgICB1bmRlZmluZWQKLy8gQHZlcnNpb24gICAgICAwLjMuMAovLyBAZGVzY3JpcHRpb24gIOW3tOWjq+mAmuelqO+8jOS4gOelqOWcqOaJi++8jOWkqeS4i+aIkeacieOAguaXoOiuuuaYr1ZJUOmZkOWItu+8jOi/mOaYr+S4pOS4quWwj+aXtumZkOWItu+8jOe7n+e7n+aXoOinhuOAggovLyBAYXV0aG9yICAgICAgIGMuYy7mnKjlpLQKLy8gQGhvbWVwYWdlICAgICBodHRwczovL3NsZWF6eWZvcmsub3JnL3poLUNOL3NjcmlwdHMvMjY5MjcKLy8gQGluY2x1ZGUgICAgICAqOi8vKmF2YnVzNzcuY29tLypvcD12aWV3KgovLyBAaW5jbHVkZSAgICAgICo6Ly8qYXZidXM4ODguY29tLypvcD12aWV3KgovLyBAaW5jbHVkZSAgICAgICo6Ly8qYnVzMjIyLmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKmdvZ281NTc3LmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKmdvZ281NTg4LmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKmdvZ283Nzc3LmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKmdvZ284ODY2LmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKmdvZ284ODg4LmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKmphdjUxMy5jb20vKm9wPXZpZXcqCi8vIEBpbmNsdWRlICAgICAgKjovLypqYXY1MTMubWUvKm9wPXZpZXcqCi8vIEBpbmNsdWRlICAgICAgKjovLypra2s1NTEuY29tLypvcD12aWV3KgovLyBAaW5jbHVkZSAgICAgICo6Ly8qbW1hdjMzLmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKnV1a2s4ODExLmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKnV1a2s4ODc3LmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKnV1a2s4ODg4LmNvbS8qb3A9dmlldyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKnV1dTU1Ny5jb20vKm9wPXZpZXcqCi8vIEBpbmNsdWRlICAgICAgKjovLyp2MTAxLmNvLypvcD12aWV3KgovLyBAZ3JhbnQgICAgICAgIHVuc2FmZVdpbmRvdwovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LWVuZAovLyBAbGljZW5zZSAgICAgIE1JVCBMaWNlbnNlCi8vIEBjb21wYXRpYmxlICAgc2FmYXJpCi8vIEBjb21wYXRpYmxlICAgY2hyb21lCi8vIEBjb21wYXRpYmxlICAgZmlyZWZveAovLyBAY29tcGF0aWJsZSAgIG9wZXJhIOacqua1i+ivlQovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9jZG4uYm9vdGNzcy5jb20vanF1ZXJ5LzIuMS40L2pxdWVyeS5taW4uanMKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgc2hvd1RpdGxlKCk7CgogICAgaWYodHlwZW9mKGV4cG9ydEZ1bmN0aW9uKSA9PSAidW5kZWZpbmVkIil7CiAgICAgICAgdW5zYWZlV2luZG93LmRvX3BsYXlwMnA9aXNMb2FkaW5nOwogICAgICAgIHVuc2FmZVdpbmRvdy5kb19wbGF5Zmxhc2g9aXNMb2FkaW5nOwogICAgICAgIHVuc2FmZVdpbmRvdy5kb19wbGF5dHM9aXNMb2FkaW5nOwogICAgfWVsc2V7CiAgICAgICAgdmFyIGlzTG9hZGluZ0Z1bmM9ZXhwb3J0RnVuY3Rpb24oaXNMb2FkaW5nLHVuc2FmZVdpbmRvdyk7CiAgICAgICAgdW5zYWZlV2luZG93LmRvX3BsYXlwMnA9aXNMb2FkaW5nRnVuYzsKICAgICAgICB1bnNhZmVXaW5kb3cuZG9fcGxheWZsYXNoPWlzTG9hZGluZ0Z1bmM7CiAgICAgICAgdW5zYWZlV2luZG93LmRvX3BsYXl0cz1pc0xvYWRpbmdGdW5jOwogICAgfQoKICAgICQoZnVuY3Rpb24oKXsKICAgICAgICBpZih0eXBlb2YoZXhwb3J0RnVuY3Rpb24pID09ICJ1bmRlZmluZWQiKXsKICAgICAgICAgICAgdW5zYWZlV2luZG93LmRvX3BsYXlwMnA9Z2V0X3AycDsKICAgICAgICAgICAgdW5zYWZlV2luZG93LmRvX3BsYXlmbGFzaD1nZXRfZmxhc2g7CiAgICAgICAgICAgIHVuc2FmZVdpbmRvdy5kb19wbGF5dHM9Z2V0X21wNDsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdW5zYWZlV2luZG93LmRvX3BsYXlwMnA9ZXhwb3J0RnVuY3Rpb24gKGdldF9wMnAsIHVuc2FmZVdpbmRvdyk7CiAgICAgICAgICAgIHVuc2FmZVdpbmRvdy5kb19wbGF5Zmxhc2g9ZXhwb3J0RnVuY3Rpb24gKGdldF9mbGFzaCwgdW5zYWZlV2luZG93KTsKICAgICAgICAgICAgdW5zYWZlV2luZG93LmRvX3BsYXl0cz1leHBvcnRGdW5jdGlvbiAoZ2V0X21wNCwgdW5zYWZlV2luZG93KTsKICAgICAgICB9CiAgICB9KTsKCiAgICBmdW5jdGlvbiBzaG93VGl0bGUoKXsKICAgICAgICB2YXIgaW5mb0VsZW1lbnQgPSAkKCJkaXYucGxheWVyYnRuIHRhYmxlIHRib2R5IHRyIHRkIikuZmlyc3QoKTsKICAgICAgICB2YXIgdGl0bGVIdG1sPSc8cD7lsIrmlaznmoTkuZjlrqLvvIzmrKLov47kuIrovaYhISHogIHlj7jmnLrluKbkvaDmt7HlpJzpo5novaY8cD4nOwogICAgICAgIHRpdGxlSHRtbCs9JzxwIHN0eWxlPSJjb2xvcjpyZWQiPuiEmuacrOWcqOmhtemdouWujOWFqOWKoOi9veWujOaIkOWQjuaJjeS8muaJp+ihjO+8jOivt+iAkOW/g+etieW+hemhtemdouWKoOi9vTwvcD4nOwogICAgICAgIHRpdGxlSHRtbCs9JzxwPjxzcGFuIHN0eWxlPSJjb2xvcjpyZWQiPuaWsOeJiOacrOS4jeiHquWKqOWKoOi9veaSreaUvuWZqDwvc3Bhbj7vvIzmkq3mlL7mqKHlvI/pmo/lv4PliIfmjaLvvIxGbGFzaO+8jEFuZHJvaWTvvIxpT1PvvIzllpzmrKLlk6rkuKrngrnlk6rkuKo8cD4nOwogICAgICAgIHRpdGxlSHRtbCs9JzxwPumcgOimgeWKoOmAn+WZqOeahOaooeW8j+i/mOayoeaciea1i+ivle+8jOaJi+WktOWunuWcqOayoeaciVdpbmRvd3PkuoY8L3A+JzsKICAgICAgICBpZihpbmZvRWxlbWVudC5sZW5ndGggPT09IDApewogICAgICAgICAgICBpbmZvRWxlbWVudCA9ICQoImRsLmRsX3RpcCBkZCIpLmZpcnN0KCk7CiAgICAgICAgICAgIHRpdGxlSHRtbCs9JzxwPuWKoOmAn+WZqOS4i+i9ve+8mjxhIGhyZWY9Ii4vc29nb2Z1bi1zZXR1cDAyMDUuZXhlIiB0YXJnZXQ9Il9ibGFuayI+SUXvvIxDaHJvbWXmkq3mlL7liqDpgJ/lmahleGXkuIvovb0oNi4yTSkoMjAxNjAyMDXmm7TmlrApPC9hPjwvcD4nOwogICAgICAgICAgICB0aXRsZUh0bWwrPSc8cD4o5pKt5pS+5b2x54mHMSnvvIzkvb/nlKjliqDpgJ/lmajmkq3mlL7vvIzor7fnlKjmiLfliqHlv4Xmm7TmlrAwMjA15paw54mI44CCPC9wPic7CiAgICAgICAgICAgIHRpdGxlSHRtbCs9JzxwPijmkq3mlL7lvbHniYcyKe+8jChBbmRyb2lk5a6J5Y2TKe+8jChpUGhvbmXoi7nmnpwp77yM54K55Ye75Y2z5Y+v5pKt5pS+77yM5peg6ZyA5a6J6KOF5Lu75L2V5pKt5pS+5Zmo44CCPC9wPic7CiAgICAgICAgfQogICAgICAgIGluZm9FbGVtZW50Lmh0bWwodGl0bGVIdG1sKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc0xvYWRpbmcoKXsKICAgICAgICBhbGVydCgn6aG16Z2i5Yqg6L295Lit77yM6K+36ICQ5b+D562J5b6FJyk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0X3BsYXlfdmlldygpewogICAgICAgIHZhciBwbGF5X3ZpZXcgPSAkKCcjcGxheV92aWV3Jyk7CiAgICAgICAgaWYocGxheV92aWV3Lmxlbmd0aCA9PT0gMCl7CiAgICAgICAgICAgIHBsYXlfdmlldyA9ICQoJyNwbGF5dmlkZW8nKTsKICAgICAgICB9CiAgICAgICAgcGxheV92aWV3LmF0dHIoe3dpZHRoOiAiNjk0cHgiLCBoZWlnaHQ6ICI0MzRweCJ9KTsKICAgICAgICBwbGF5X3ZpZXcuY3NzKCJiYWNrZ3JvdW5kLWltYWdlIiwgInVybCgnJykiKTsKICAgICAgICByZXR1cm4gcGxheV92aWV3OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldF9wMnAoKXsKICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgnPG9iamVjdCBjbGFzc2lkPSguKik/PC9vYmplY3Q+Jyk7CiAgICAgICAgdmFyIGh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdLmlubmVySFRNTDsKICAgICAgICB2YXIgbWF0Y2ggPSBodG1sLm1hdGNoKHJlZylbMF07CgogICAgICAgIHZhciBwbGF5X3ZpZXcgPSBnZXRfcGxheV92aWV3KCk7CiAgICAgICAgdmFyIHBodG1sID0gbWF0Y2g7CiAgICAgICAgcGxheV92aWV3Lmh0bWwocGh0bWwpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldF9mbGFzaCgpewogICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKCdwMnBzX2VtYmVkXCgoLiopP1wpOycpOwogICAgICAgIHZhciBodG1sID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXS5pbm5lckhUTUw7CiAgICAgICAgdmFyIG1hdGNoID0gaHRtbC5tYXRjaChyZWcpWzBdOwogICAgICAgIG1hdGNoID0gbWF0Y2gucmVwbGFjZSgnZGF0YS5vbmVwd2QnLCAnIiInKTsKCiAgICAgICAgdmFyIHBsYXlfdmlldyA9IGdldF9wbGF5X3ZpZXcoKTsKICAgICAgICB2YXIgcGh0bWwgPSAnPGRpdiBpZD0icDJwc192aWRlbyI+PGgxPuaIkeS7rOmcgOimgUZsYXNoIHBsYXllciAxMC4x5oiW5Lul5LiK54mI5pys5p2l5pKt5pS+44CCPC9oMT48cD48YSBocmVmPSJodHRwOi8vd3d3LmFkb2JlLmNvbS9nby9nZXRmbGFzaHBsYXllciI+PGltZyBzcmM9Imh0dHA6Ly93d3cuYWRvYmUuY29tL2ltYWdlcy9zaGFyZWQvZG93bmxvYWRfYnV0dG9ucy9nZXRfZmxhc2hfcGxheWVyLmdpZiIgYWx0PSLlronoo4XmnIDmlrDnmoRGbGFzaCBwbGF5ZXIiIC8+PC9hPjwvcD48L2Rpdj4nOwogICAgICAgIHBsYXlfdmlldy5odG1sKHBodG1sKTsKICAgICAgICB1bnNhZmVXaW5kb3cuZXZhbChtYXRjaCk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0X21wNCgpewogICAgICAgIHZhciBybmRfaXAgPSAkKCIjcm5kX2lwIikudmFsKCk7CiAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoIjo4MDgwKC4qKT8ubTN1OCIpOwogICAgICAgIHZhciBodG1sID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXS5pbm5lckhUTUw7CiAgICAgICAgdmFyIG1hdGNoID0gaHRtbC5tYXRjaChyZWcpWzBdOwogICAgICAgIHZhciBtM3U4ID0gcm5kX2lwICsgbWF0Y2g7CgogICAgICAgIHZhciBwbGF5X3ZpZXcgPSBnZXRfcGxheV92aWV3KCk7CiAgICAgICAgdmFyIHBodG1sID0gJzx2aWRlbyB3aWR0aD0iNjk0cHgiIGhlaWdodD0iNDM0cHgiIGF1dG9wbGF5PSJhdXRvcGxheSIgY29udHJvbHM+PHNvdXJjZSBzcmM9IicgKyBtM3U4ICsgJyIgdHlwZT0iYXBwbGljYXRpb24veC1tcGVnVVJMIj5Zb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgdmlkZW8gdGFnLjwvdmlkZW8+JzsKICAgICAgICBwbGF5X3ZpZXcuaHRtbChwaHRtbCk7CiAgICB9Cgp9KSgpOw=="},{"name":"CL1024","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332336},"enabled":false,"position":17,"file_url":"https://sleazyfork.org/scripts/1983-cl1024/code/CL1024.user.js","uuid":"9158243a-d3e2-49a5-8735-77269c130c45","source":""},{"name":"腾讯云","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.qcloud.com/act/campus"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":["https://www.qcloud.com/act/*"],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332340},"enabled":false,"position":18,"uuid":"a69be74e-b246-4e31-ac84-e87bc29ad54a","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDohb7orq/kupEKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy5xY2xvdWQuY29tL2FjdC9jYW1wdXMKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgdmFyIG15RGF0ZSA9IG5ldyBEYXRlKCk7CiAgICB2YXIgcmVmID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgIGlmIChteURhdGUuZ2V0SG91cnMoKT09MTIgJiYgbXlEYXRlLmdldE1pbnV0ZXMoKT09MCAmJiBteURhdGUuZ2V0U2Vjb25kcygpPT0wKSB7CiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgICAgICBjbGVhckludGVydmFsKHJlZik7CiAgICAgICAgfQogICAgICAgIG15RGF0ZSA9IG5ldyBEYXRlKCk7CiAgICB9LDEwMCk7CgogICAgdmFyIGJ0biA9ICQoJy5KX2FwcGxheUxpbWl0ZWRQYWNrYWdlJyk7CiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKGJ0bi50ZXh0KCkgIT0gIuacquW8gOWniyIpIHsKICAgICAgICAgICAgYnRuLmNsaWNrKCk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfliKTmlq3miJDlip8nKTsKICAgICAgICB9ZWxzZSB7CiAgICAgICAgICAgIC8vIGJ0bi5jbGljaygpOwogICAgICAgICAgICBjb25zb2xlLmxvZygn5Yik5pat5aSx6LSlJyk7CiAgICAgICAgfQogICAgfSw1MDApOwp9KSgpOw=="},{"name":"apiv云播","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["https://btdigg.org/search*","http://btdigg.org/search*","http://www.mp4ba.com/*","http://*.jav*.*","https://*.jav*.*","http://*.torrent*.*/*","https://*.torrent*.*/*","http://*.bt*.*","https://*.bt*.*","http://*.cili*.*","https://*.cili*.*","http://torrentproject.*","https://torrentproject.*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1492505332344},"enabled":true,"position":19,"file_url":"https://sleazyfork.org/scripts/23759-apiv%E4%BA%91%E6%92%AD/code/apiv%E4%BA%91%E6%92%AD.user.js","uuid":"22c2c8bd-7333-45aa-8798-546f7bf1e432","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBhcGl25LqR5pKtCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEBpY29uICAgICAgICAgaHR0cDovL2FwaXYuZ2EvZmF2aWNvbi5pY28KLy8gQHZlcnNpb24gICAgICAxLjIKLy8gQGRlc2NyaXB0aW9uICDmib7lh7rpobXpnaLkuK3nmoTno4Hlipvpk77mjqXvvIzlubbmj5Dkvpvot7PovazliLBhcGl25LqR5pKt6aG16Z2iCi8vIEBhdXRob3IgICAgICAg5p6r5LiN5bmzCi8vIEBpbmNsdWRlICAgICAgaHR0cHM6Ly9idGRpZ2cub3JnL3NlYXJjaCoKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vYnRkaWdnLm9yZy9zZWFyY2gqCi8vIEBpbmNsdWRlICAgICAgaHR0cDovL3d3dy5tcDRiYS5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly8qLmphdiouKgovLyBAaW5jbHVkZSAgICAgIGh0dHBzOi8vKi5qYXYqLioKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vKi50b3JyZW50Ki4qLyoKLy8gQGluY2x1ZGUgICAgICBodHRwczovLyoudG9ycmVudCouKi8qCi8vIEBpbmNsdWRlICAgICAgaHR0cDovLyouYnQqLioKLy8gQGluY2x1ZGUgICAgICBodHRwczovLyouYnQqLioKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vKi5jaWxpKi4qCi8vIEBpbmNsdWRlICAgICAgaHR0cHM6Ly8qLmNpbGkqLioKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vdG9ycmVudHByb2plY3QuKgovLyBAaW5jbHVkZSAgICAgIGh0dHBzOi8vdG9ycmVudHByb2plY3QuKgovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LWVuZAovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBmdW5jdGlvbiBnZXRBbGxNYWduZXQobm9kZXMpIHsKICAgICAgICB2YXIgc3R5RGl5ID0gJ3dpZHRoOjE2cHg7aGVpZ2h0OjE2cHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoImh0dHBzOi8vYXBpdi5nYS9mYXZpY29uLmljbyIpO2JhY2tncm91bmQtc2l6ZToxNnB4IDE2cHg7ZGlzcGxheTogaW5saW5lLWJsb2NrJzsKICAgIAl2YXIgYW9iaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgIAlhb2JqLnRhcmdldCA9ICdfYmxhbmsnOwogICAgCWFvYmouc3R5bGUuY3NzVGV4dCA9IHN0eURpeTsKICAgIAlmb3IodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoIDsgaSsrICl7CiAgICAgICAgICAgIHZhciBhZXhwID0gYW9iai5jbG9uZU5vZGUodHJ1ZSk7CiAgICAJCXZhciBtYWduZXQgPSBub2Rlc1tpXS5ocmVmLm1hdGNoKC9cd3s0MH0vLCdnJyk7CiAgICAJCWFleHAuaHJlZiA9ICdodHRwczovL2FwaXYuZ2EvbWFnbmV0LycgKyBtYWduZXQgKyAnLzAnOwogICAgCQlub2Rlc1tpXS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGFleHApOwogICAgCX0KICAgIH0KICAgIHZhciBjb3VudCA9IDA7CiAgICBmdW5jdGlvbiBpbml0KCkgewogICAgCXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgIAkJdmFyIG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYVtocmVmXj0ibWFnbmV0Il0nKTsKICAgIAkJaWYoIG5vZGVzLmxlbmd0aCA+IDApewogICAgCQkJZ2V0QWxsTWFnbmV0KG5vZGVzKTsKICAgIAkJfWVsc2UgaWYoY291bnQgPCA1KXsKICAgIAkJCWluaXQoKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWlsJyk7CiAgICAgICAgICAgICAgICBjb3VudCsrOwogICAgCQl9CiAgICAJfSwyMDApOwogICAgfQogICAgd2luZG93Lm9ubG9hZCA9IGluaXQ7Cn0pKCk7"},{"name":"挊-随时开车","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://*"],"orig_matches":[],"orig_noframes":true,"orig_run_at":"document-end","use_blockers":[],"use_connects":["btso.pw","btdb.in"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"enable_select_popup":"btrue","magnet":"s","search_index":"s0"},"ts":1502001592291},"enabled":false,"position":20,"file_url":"https://greasyfork.org/scripts/26779-%E6%8C%8A-%E9%9A%8F%E6%97%B6%E5%BC%80%E8%BD%A6/code/%E6%8C%8A-%E9%9A%8F%E6%97%B6%E5%BC%80%E8%BD%A6.user.js","uuid":"54b395dc-bb81-4e01-ba1b-fde5a72053c3","source":""},{"name":"破解VIP会员视频集合","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://*.bilibili.com/blackboard/*"],"orig_includes":[],"orig_matches":["*://*.iqiyi.com/*","*://*.youku.com/*","*://*.le.com/*","*://*.letv.com/*","*://v.qq.com/*","*://*.tudou.com/*","*://*.mgtv.com/*","*://film.sohu.com/*","*://tv.sohu.com/*","*://*.acfun.cn/v/*","*://*.bilibili.com/*","*://vip.1905.com/play/*","*://*.pptv.com/*","*://v.yinyuetai.com/video/*","*://v.yinyuetai.com/playlist/*","*://*.fun.tv/vplay/*","*://*.wasu.cn/Play/show/*","*://*.56.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"replaceRaw":"bfalse"},"ts":1499835648840},"enabled":false,"position":21,"file_url":"https://greasyfork.org/scripts/27530-%E7%A0%B4%E8%A7%A3vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88/code/%E7%A0%B4%E8%A7%A3VIP%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88.user.js","uuid":"6423e2ae-16fe-47f6-9e55-09f524fcf096","source":""},{"name":"youku-html5","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.youku.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1496880511998,"data":{}},"enabled":false,"position":22,"uuid":"36ba9542-d5db-437f-8cd0-501edba06bb6","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgeW91a3UtaHRtbDUKLy8gQG5hbWVzcGFjZSBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gMC4xCi8vIEBkZXNjcmlwdGlvbiB5b3VrdS1odG1sNQovLyBAYXV0aG9yIGpzd2gKLy8gQG1hdGNoICo6Ly8qLnlvdWt1LmNvbS8qCi8vIEBncmFudCBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oIlBfbF9oNSIsIHRydWUpOwp9KSgpOw=="},{"name":"京东","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["http://coupon.m.jd.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1497668409236,"data":{}},"enabled":false,"position":23,"uuid":"598baf4d-8430-40d6-acbd-aba6b6d54974","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDkuqzkuJwKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwOi8vY291cG9uLm0uamQuY29tLyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgdmFyIGJ0biA9ICQoJyNidG5TdWJtaXQnKTsKICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgaWYoYnRuLnRleHQoKSAhPSAn5LiN5Y+v6aKG5Y+WJyl7CiAgICAgICAgICAgIGJ0bi5jbGljaygpOwogICAgICAgICAgICBjb25zb2xlLmxvZygn5Yik5pat5oiQ5YqfJyk7CiAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgY29uc29sZS5sb2coJ+WIpOaWreWksei0pScpOwogICAgICAgICB9CiAgICB9LDIwMCk7CgogICAgdmFyIG15RGF0ZSA9IG5ldyBEYXRlKCk7CiAgICB2YXIgcmVmID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgIGlmIChteURhdGUuZ2V0SG91cnMoKT09MTQgJiYgbXlEYXRlLmdldE1pbnV0ZXMoKT09MCAmJiBteURhdGUuZ2V0U2Vjb25kcygpPT0wKSB7CiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgICAgICBjbGVhckludGVydmFsKHJlZik7CiAgICAgICAgfQogICAgICAgIG15RGF0ZSA9IG5ldyBEYXRlKCk7CiAgICB9LDEwMCk7Cn0pKCk7"},{"name":"网页限制解除(改)","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"black_list":"o{\"status\":1,\"version\":1.1,\"message\":\"0.1測試版，2017-05-16發佈\",\"data\":[\"b.faloo.com\",\"book.hjsm.tom.com\",\"book.zhulang.com\",\"book.zongheng.com\",\"chokstick.com\",\"chuangshi.qq.com\",\"cutelisa55.pixnet.net\",\"huayu.baidu.com\",\"imac.hk\",\"life.tw\",\"news.missevan.com\",\"read.qidian.com\",\"www.15yan.com\",\"www.17k.com\",\"www.18183.com\",\"www.360doc.com\",\"www.99lib.net\",\"www.coco01.net\",\"www.eyu.com\",\"www.hongshu.com\",\"www.hongxiu.com\",\"www.jjwxc.net\",\"www.readnovel.com\",\"www.tadu.com\",\"www.xxsy.net\",\"www.z3z4.com\",\"www.zhihu.com\",\"yuedu.163.com\"]}"},"ts":1503036396894},"enabled":false,"position":24,"file_url":"https://greasyfork.org/scripts/28497-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4-%E6%94%B9/code/%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4(%E6%94%B9).user.js","uuid":"b8e15d2c-f321-4ba7-a311-4c7f341fd78f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWVzcGFjZSAgICAgICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvemgtQ04vdXNlcnMvMTA2MjIyLXF4aW4taQoKLy8gQG5hbWUgICAgICAgICAgICAgIOe9kemhtemZkOWItuino+mZpCjmlLkpCi8vIEBuYW1lOmVuICAgICAgICAgICBSZW1vdmUgd2ViIGxpbWl0cwovLyBAbmFtZTp6aCAgICAgICAgICAg572R6aG16ZmQ5Yi26Kej6ZmkCi8vIEBuYW1lOmphICAgICAgICAgICDjgqbjgqfjg5bjga7opo/liLbnt6nlkowKCi8vIEBhdXRob3IgICAgICAgICAgICBDYXQ3MyZpcXhpbijkv67mlLkpCgovLyBAZGVzY3JpcHRpb24gICAgICAg6YCa5p2A5aSn6YOo5YiG572R56uZ77yM5Y+v5Lul6Kej6Zmk56aB5q2i5aSN5Yi244CB5Ymq5YiH44CB6YCJ5oup5paH5pys44CB5Y+z6ZSu6I+c5Y2V55qE6ZmQ5Yi244CC5Y6f5L2c6ICFY2F0NzPvvIzlm6DkuLrlkozmkJzntKLot7PovazohJrmnKzlhrLnqoHvvIzpgYLov5vooYzkuobmlLnliqjvvIzmlLnkuLrpu5HlkI3ljZXliLbjgIIKLy8gQGRlc2NyaXB0aW9uOmVuICAgIFBhc3MgdG8ga2lsbCBtb3N0IG9mIHRoZSBzaXRlLCB5b3UgY2FuIGxpZnQgdGhlIHJlc3RyaWN0aW9ucyBwcm9oaWJpdGVkIHRvIGNvcHksIGN1dCwgc2VsZWN0IHRoZSB0ZXh0LCByaWdodC1jbGljayBtZW51LgovLyBAZGVzY3JpcHRpb246emggICAg6YCa5p2A5aSn6YOo5YiG572R56uZ77yM5Y+v5Lul6Kej6Zmk56aB5q2i5aSN5Yi244CB5Ymq5YiH44CB6YCJ5oup5paH5pys44CB5Y+z6ZSu6I+c5Y2V55qE6ZmQ5Yi244CC5Y6f5L2c6ICFY2F0NzPvvIzlm6DkuLrlkozmkJzntKLot7PovazohJrmnKzlhrLnqoHvvIzpgYLov5vooYzkuobmlLnliqjvvIzmlLnkuLrpu5HlkI3ljZXliLbjgIIKLy8gQGRlc2NyaXB0aW9uOnpoLUNOIOmAmuadgOWkp+mDqOWIhue9keerme+8jOWPr+S7peino+mZpOemgeatouWkjeWItuOAgeWJquWIh+OAgemAieaLqeaWh+acrOOAgeWPs+mUruiPnOWNleeahOmZkOWItuOAguWOn+S9nOiAhWNhdDcz77yM5Zug5Li65ZKM5pCc57Si6Lez6L2s6ISa5pys5Yay56qB77yM6YGC6L+b6KGM5LqG5pS55Yqo77yM5pS55Li66buR5ZCN5Y2V5Yi244CCCi8vIEBkZXNjcmlwdGlvbjp6aC1UVyDpgJrmrrrlpKfpg6jliIbntrLnq5nvvIzlj6/ku6Xop6PpmaTnpoHmraLlvqnliLbjgIHliarliIfjgIHpgbjmk4fmlofmnKzjgIHlj7PpjbXoj5zllq7nmoTpmZDliLbjgIIKLy8gQGRlc2NyaXB0aW9uOmphICAgIOOCteOCpOODiOOBruOBu+OBqOOCk+OBqeOCkuauuuOBmeOBn+OCgeOBq+a4oeOBl+OAgeOBguOBquOBn+OBr+OAgeOCs+ODlOODvOWIh+OCiuWPluOCiuOAgeODhuOCreOCueODiOOAgeWPs+OCr+ODquODg+OCr+ODoeODi+ODpeODvOOCkumBuOaKnuOBmeOCi+OBk+OBqOOBr+emgeatouOBruWItumZkOOCkuino+mZpOOBmeOCi+OBk+OBqOOBjOOBp+OBjeOBvuOBmeOAggoKLy8gQGRlc2NyaXB0aW9uICAgICAgIOWOn+S9nOiAhWh0dHBzOi8vd3d3LmdpdGh1Yi5jb20vQ2F0NzM3My/vvIzlm6DkuLrlkozmkJzntKLot7PovazohJrmnKzlhrLnqoHvvIzpgYLov5vooYzkuobmlLnliqgKLy8gQGhvbWVwYWdlVVJMICAgICAgIGh0dHBzOi8vY2F0NzM3My5naXRodWIuaW8vcmVtb3ZlLXdlYi1saW1pdHMvCi8vIEBzdXBwb3J0VVJMICAgICAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3poLUNOL3NjcmlwdHMvMjg0OTcKCi8vIEBpY29uICAgICAgICAgICAgICAgZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFDQUFBQUFnQ0FRQUFBRFpjN0ovQUFBQnBFbEVRVlI0bk8zVnYydVVRUkRHOGMvZWJTTVdxYXkwdHJBVEF4clVTaTFTMkFpV0ZvSllwTkNnb0JqVVJzSFdKS2VOUmZBdnNEZ0ZpeFFxS2RQWjJWaUVpQ0pZQk9RdThmMWhFWE81OTcxM2o3TVVmTFo2ZDJhL084dk1PME96RG5pbjlLdTJNanZ1YXcwN3hnU0FZRVZYZTJpbmRNaGo5MnpwS0pMbkJoRjhNRGV5ZTlobjZ6Yk43MGVSaXFDdzAyQnJhM3VwOEJCTHUxRkVCeHNCdWNYcVc0Y3N6MFVMZTRqb3JTQ011UFU4OWJvUkVMRE1IaUk2WThWNjViYkNVVGNjYzcwUmthT3dLTE9nMElreVhhOXFUak91MkxBczZOWnVEODZocmRUeXhSTlRrVXFxZGhYbEhybmdHUlZFWnNNcEp3ZXg5RHhJWlNIWWNsZXNJYjY1TENvSGdJczY2VUpxNmJ0REJaSFpyUGg4VjZZQk9YNjZMYk9rVEdja0JZaW1CVzJGVlROZXVPWk55ckZKMjM2WWw0TlN5NVNiVm0xUER2aG9kcWd5TWxlZFRkUmxBdER6cWZMOXRma3dVdHlhUmt2OUx3Rmo5Qi93N3dQeWNYT2hxbEoweVpIS1BDaE1pNU1DaU00N1hoc29wYlZKQVVIZnJZYm1OL0VUb04rMDJlTFBmejlPWXlaaEZKelcxSm4zbFRzeGFLUWpDa3A1Mmp5NDVyMVp2U2JUYjlNMGQ0UEJvekdaQUFBQUFFbEZUa1N1UW1DQwoKLy8gQHZlcnNpb24gICAgICAgICAgIDIuNC4yCi8vIEBsaWNlbnNlICAgICAgICAgICBMR1BMdjMKCi8vIEBjb21wYXRpYmxlICAgICAgICBjaHJvbWUgQ2hyb21lXzQ2LjAuMjQ5MC44NiArIFRhbXBlck1vbmtleSArIOiEmuacrF8xLjMg5rWL6K+V6YCa6L+HCi8vIEBjb21wYXRpYmxlICAgICAgICBmaXJlZm94IEZpcmVmb3hfNDIuMCArIEdyZWFzZU1vbmtleSArIOiEmuacrF8xLjIuMSDmtYvor5XpgJrov4cKLy8gQGNvbXBhdGlibGUgICAgICAgIG9wZXJhIE9wZXJhXzMzLjAuMTk5MC4xMTUgKyBUYW1wZXJNb25rZXkgKyDohJrmnKxfMS4xLjMg5rWL6K+V6YCa6L+HCi8vIEBjb21wYXRpYmxlICAgICAgICBzYWZhcmkg5pyq5rWL6K+VCgovLyBAbWF0Y2ggICAgICAgICAgICAgKjovLyovKgovLyBAZ3JhbnQgICAgICAgR01fZ2V0VmFsdWUKLy8gQGdyYW50ICAgICAgIEdNX3NldFZhbHVlCi8vIEBncmFudCAgICAgICBHTV9hZGRTdHlsZQovLyBAZ3JhbnQgICAgICAgR01fZGVsZXRlVmFsdWUKLy8gQHJ1bi1hdCAgICAgIGRvY3VtZW50LWVuZAovLyA9PS9Vc2VyU2NyaXB0PT0KKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3mt7vliqAgc3RhcnQKICAgIGZ1bmN0aW9uIHRlc3QoKXsKICAgICAgICB2YXIgYmxhY2tfbGlzdF91c2VyID0gR01fZ2V0VmFsdWUoImxpc3RfdXNlciIpOwogICAgICAgIGNvbnNvbGUubG9nKGJsYWNrX2xpc3RfdXNlcik7CiAgICB9CgogIC8vIOajgOafpSwg5q2k6JmV5oeJ5bCH5pW457WE5pS554K6IFNldCDntZDmp4soMjAxNy0wNS0xNu+8jOWboOeCuuaHtu+8jOaJgOS7peS4jeaDs+WLlSkKICAgIGZ1bmN0aW9uIGJsYWNrX2NoZWNrKGJvb2wpewogICAgICAgIHZhciBob3N0bmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTsKICAgICAgICB2YXIgY2hlY2sgPSBjaGVja19ibGFja19saXN0KGxpc3QsaG9zdG5hbWUpOwoKICAgICAgICAvLyBjb25zb2xlLmxvZygiY2hlY2s6ICIsY2hlY2spOwogICAgICAgIC8vIGNvbnNvbGUubG9nKGxpc3QpOwoKICAgICAgICBpZiAoYm9vbCAmJiAhY2hlY2spIHsKICAgICAgICAgICAgbGlzdCA9IGxpc3QuY29uY2F0KGhvc3RuYW1lKTsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIumAieS4rSDkuI3lnKjpu5HlkI3ljZUsIOWinuWKoCIsaG9zdG5hbWUsbGlzdCk7CiAgICAgICAgfWVsc2UgaWYoIWJvb2wgJiYgY2hlY2spewogICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjaGVjay0xKTsKICAgICAgICAgICAgbGlzdC5zcGxpY2UoY2hlY2stMSwxKTsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIuacqumAieS4rSDlnKjpu5HlkI3ljZXvvIwg5Yiq6ZmkIixsaXN0KTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coIui/lOWbnmZhbHNlIik7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIC8vIGNvbnNvbGUubG9nKGxpc3QpOwogICAgICAgIHNhdmVEYXRhKGxpc3QpOwogICAgICAgIC8vIHRlc3QoKTsKICAgICAgICAvLyDliLfmlrDpobXpnaIKICAgICAgICAvLyB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTsKICAgICAgICAgICAgY29uc29sZS5sb2coImxvYWRpbmciKTsKICAgICAgICB9LDQwMCk7CiAgICB9CgogICAgZnVuY3Rpb24gc2F2ZURhdGEobGlzdCx2ZXJzaW9uKXsKICAgICAgICAvLyBjb25zb2xlLmxvZyhsaXN0KTsKICAgICAgICB2YXIgdXNlckRhdGEgPSB7CiAgICAgICAgICAgICJzdGF0dXMiOjEsCiAgICAgICAgICAgICJ2ZXJzaW9uIjpibGFja19saXN0X3ZlcnNpb24sCiAgICAgICAgICAgICJtZXNzYWdlIjoiMC4x5ris6Kmm54mI77yMMjAxNy0wNS0xNueZvOS9iCIsCiAgICAgICAgICAgICJkYXRhIjpsaXN0LnNvcnQoKQogICAgICAgIH07CiAgICAgICAgR01fc2V0VmFsdWUoImJsYWNrX2xpc3QiLHVzZXJEYXRhKTsKICAgICAgICAvLyBjb25zb2xlLmxvZyh1c2VyRGF0YSk7CiAgICAgICAgY29uc29sZS5sb2coR01fZ2V0VmFsdWUoImJsYWNrX2xpc3QiKSk7CiAgICAgICAgcmV0dXJuIHVzZXJEYXRhOwogICAgfQoKICAgIC8vIOaVuOaTmuW6q+eJiOacrOWNh+e0mu+8jOmRkuaWvOS5i+WJjTIuMS5454mI5pys5Y+q5piv6Zqo5omL5a+r55qE77yM5pyJ5aSq5aSa55qE5ZWP6aGM77yM5L+d5a2Y5pW45pOa5pyq6ICD5oWu5ZGo5YWo77yM6YGC5YaN5qyh5pS55YuVCiAgICBmdW5jdGlvbiB2ZXJzaW9uVXAoKXsKICAgICAgICB2YXIgYmxhY2tfbGlzdDsKICAgICAgICB2YXIgYmxhY2tfbGlzdF91c2VyID0gR01fZ2V0VmFsdWUoImxpc3RfdXNlciIpOwogICAgICAgIC8vIHZhciB2ZXJzaW9uMiA9IEdNX2dldFZhbHVlKCJibGFja19saXN0Iik7CiAgICAgICAgLy8gY29uc29sZS5sb2coYmxhY2tfbGlzdF91c2VyKTsKICAgICAgICBpZihibGFja19saXN0X3VzZXIpewogICAgICAgICAgICAvLyDlrZjlnKjniYjmnKzkuIDvvIzmhI/lkbPokZflvp7oiIrniYjljYfliLDmlrDniYgKICAgICAgICAgICAgYmxhY2tfbGlzdF91c2VyID0gYmxhY2tfbGlzdF91c2VyLnNwbGl0KCJ8Iik7CiAgICAgICAgICAgIGJsYWNrX2xpc3QgPSBBcnJheS5mcm9tKCBuZXcgU2V0KGJsYWNrX2xpc3RfZGVmYXVsdC5jb25jYXQoYmxhY2tfbGlzdF91c2VyKSkpOwoKICAgICAgICAgICAgLy8g5Yiq6Zmk6IiK54mI5pysCiAgICAgICAgICAgIEdNX2RlbGV0ZVZhbHVlKCJsaXN0X3VzZXIiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyDkuI3lrZjlnKjniYjmnKzkuIDvvIzkuZ/kuI3lrZjlnKjniYjmnKzkuozvvIwg5oSP5ZGz6JGX5paw55So5oi2CiAgICAgICAgICAgIGJsYWNrX2xpc3QgPSBibGFja19saXN0X2RlZmF1bHQ7CiAgICAgICAgfQoKICAgICAgICAvLyBibGFja19saXN0LmNvbmNhdAoKICAgICAgICAvLyDkv53lrZjmlbjmk5oKICAgICAgICByZXR1cm4gc2F2ZURhdGEoYmxhY2tfbGlzdCk7CiAgICB9CgogICAgLy8g6I635Y+W6buR5ZCN5Y2VCiAgICBmdW5jdGlvbiBnZXRfYmxhY2tfbGlzdCgpewoKICAgICAgICB2YXIgYmxhY2tfbGlzdCA9IEdNX2dldFZhbHVlKCJibGFja19saXN0Iik7CgogICAgICAgIGlmKCFibGFja19saXN0KXsKICAgICAgICAgICAgYmxhY2tfbGlzdCA9IHZlcnNpb25VcCgpOwogICAgICAgICAgICAvLyBibGFja19saXN0ID0gR01fZ2V0VmFsdWUoImJsYWNrX2xpc3QiKTsKICAgICAgICB9CgogICAgICAgIC8vIOm7keWQjeWWruaVuOaTmuabtOaWsAogICAgICAgIC8vIGNvbnNvbGUubG9nKCLmnKzlnLDpu5HlkI3llq7niYjmnKzvvJogIixibGFja19saXN0LnZlcnNpb24sIGJsYWNrX2xpc3RfdmVyc2lvbikKICAgICAgICBpZihibGFja19saXN0LnZlcnNpb24gPCBibGFja19saXN0X3ZlcnNpb24pewogICAgICAgICAgICBjb25zb2xlLmxvZygi5L2O54mI5pys77yM5pu05paw5pW45pOaIik7CiAgICAgICAgICAgIHZhciBuZXdfbGlzdCA9IEFycmF5LmZyb20oIG5ldyBTZXQoYmxhY2tfbGlzdF9kZWZhdWx0LmNvbmNhdChibGFja19saXN0LmRhdGEpKSk7CiAgICAgICAgICAgIGJsYWNrX2xpc3QgPSBzYXZlRGF0YShuZXdfbGlzdCk7CiAgICAgICAgfQoKICAgICAgICAvLyBjb25zb2xlLmxvZyhibGFja19saXN0KTsKICAgICAgICByZXR1cm4gYmxhY2tfbGlzdC5kYXRhOwogICAgfQogICAvLyDmo4Dmn6XmmK/lkKblrZjlnKjkuo7pu5HlkI3ljZXkuK0KICAgIGZ1bmN0aW9uIGNoZWNrX2JsYWNrX2xpc3QobGlzdCxob3N0KXsKICAgICAgICBmb3IobGV0IGk9MDtpPGxpc3QubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIC8vIGlmKGhvc3RuYW1lPT09bGlzdFtpXSl7CiAgICAgICAgICAgIGlmKH5ob3N0bmFtZS5pbmRleE9mKGxpc3RbaV0pKXsKICAgICAgICAgICAgICAgIHJldHVybiBpKzE7ICAvL+S4h+S4gOWMuemFjeWIsOesrOS4gOS4qu+8jOi/lOWbnjAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9Ci8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t5re75YqgIGVuZAogIC8vIOWfn+WQjeinhOWImeWIl+ihqAogICAgdmFyIHJ1bGVzID0gewogICAgICAgIGJsYWNrX3J1bGU6IHsKICAgICAgICAgICAgbmFtZTogImJsYWNrIiwKICAgICAgICAgICAgaG9va19ldmVudE5hbWVzOiAiIiwKICAgICAgICAgICAgdW5ob29rX2V2ZW50TmFtZXM6ICIiCiAgICAgICAgfSwKICAgICAgICBkZWZhdWx0X3J1bGU6IHsKICAgICAgICAgICAgbmFtZTogImRlZmF1bHQiLAogICAgICAgICAgICBob29rX2V2ZW50TmFtZXM6ICJjb250ZXh0bWVudXxzZWxlY3R8c2VsZWN0c3RhcnR8Y29weXxjdXR8ZHJhZ3N0YXJ0IiwKICAgICAgICAgICAgdW5ob29rX2V2ZW50TmFtZXM6ICJrZXlkb3dufGtleXVwfG1vdXNlZG93bnxtb3VzZXVwIiwKICAgICAgICAgICAgZG9tMDogdHJ1ZSwKICAgICAgICAgICAgaG9va19hZGRFdmVudExpc3RlbmVyOiB0cnVlLAogICAgICAgICAgICBob29rX3ByZXZlbnREZWZhdWx0OiB0cnVlLAogICAgICAgICAgICBob29rX3NldF9yZXR1cm5WYWx1ZTogdHJ1ZSwKICAgICAgICAgICAgYWRkX2NzczogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgcnVsZV9wbHVzOiB7CiAgICAgICAgICAgIG5hbWU6ICJkZWZhdWx0IiwKICAgICAgICAgICAgaG9va19ldmVudE5hbWVzOiAiY29udGV4dG1lbnV8c2VsZWN0fHNlbGVjdHN0YXJ0fGNvcHl8Y3V0fGRyYWdzdGFydHxtb3VzZWRvd258bW91c2V1cCIsCiAgICAgICAgICAgIHVuaG9va19ldmVudE5hbWVzOiAia2V5ZG93bnxrZXl1cCIsCiAgICAgICAgICAgIGRvbTA6IHRydWUsCiAgICAgICAgICAgIGhvb2tfYWRkRXZlbnRMaXN0ZW5lcjogdHJ1ZSwKICAgICAgICAgICAgaG9va19wcmV2ZW50RGVmYXVsdDogdHJ1ZSwKICAgICAgICAgICAgaG9va19zZXRfcmV0dXJuVmFsdWU6IHRydWUsCiAgICAgICAgICAgIGFkZF9jc3M6IHRydWUKICAgICAgICB9CiAgICB9OwoKCiAgLy8g6KaB5aSE55CG55qEIGV2ZW50IOWIl+ihqAogICAgdmFyIGhvb2tfZXZlbnROYW1lcywgdW5ob29rX2V2ZW50TmFtZXMsIGV2ZW50TmFtZXM7CiAgICAvLyDlgqjlrZjlkI3np7AKICAgIHZhciBzdG9yYWdlTmFtZSA9IGdldFJhbmRTdHIoJ3F3ZXJ0eXVpb3Bhc2RmZ2hqa2x6eGN2Ym5tUVdFUlRZVUlPUEFTREZHSEpLTFpYQ1ZCTk0nLCBwYXJzZUludChNYXRoLnJhbmRvbSgpICogMTIgKyA4KSk7CiAgICAvLyDlgqjlrZjooqsgSG9vayDnmoTlh73mlbAKICAgIHZhciBFdmVudFRhcmdldF9hZGRFdmVudExpc3RlbmVyID0gRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI7CiAgICB2YXIgZG9jdW1lbnRfYWRkRXZlbnRMaXN0ZW5lciA9IGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7CiAgICB2YXIgRXZlbnRfcHJldmVudERlZmF1bHQgPSBFdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQ7CgogICAgLy8gSG9vayBhZGRFdmVudExpc3RlbmVyIHByb2MKICAgIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuYywgdXNlQ2FwdHVyZSkgewogICAgICAgIHZhciBfYWRkRXZlbnRMaXN0ZW5lciA9IHRoaXMgPT09IGRvY3VtZW50ID8gZG9jdW1lbnRfYWRkRXZlbnRMaXN0ZW5lciA6IEV2ZW50VGFyZ2V0X2FkZEV2ZW50TGlzdGVuZXI7CiAgICAgICAgaWYoaG9va19ldmVudE5hbWVzLmluZGV4T2YodHlwZSkgPj0gMCkgewogICAgICAgICAgICBfYWRkRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBbdHlwZSwgcmV0dXJuVHJ1ZSwgdXNlQ2FwdHVyZV0pOwogICAgICAgIH0gZWxzZSBpZih1bmhvb2tfZXZlbnROYW1lcy5pbmRleE9mKHR5cGUpID49IDApIHsKICAgICAgICAgICAgdmFyIGZ1bmNzTmFtZSA9IHN0b3JhZ2VOYW1lICsgdHlwZSArICh1c2VDYXB0dXJlID8gJ3QnIDogJ2YnKTsKCiAgICAgICAgICAgIGlmKHRoaXNbZnVuY3NOYW1lXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICB0aGlzW2Z1bmNzTmFtZV0gPSBbXTsKICAgICAgICAgICAgICAgIF9hZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIFt0eXBlLCB1c2VDYXB0dXJlID8gdW5ob29rX3QgOiB1bmhvb2tfZiwgdXNlQ2FwdHVyZV0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzW2Z1bmNzTmFtZV0ucHVzaChmdW5jKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfYWRkRXZlbnRMaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KICAgIH0KCiAgLy8g5riF55CG5b6q546vCiAgICBmdW5jdGlvbiBjbGVhckxvb3AoKSB7CiAgICAgICAgdmFyIGVsZW1lbnRzID0gZ2V0RWxlbWVudHMoKTsKCiAgICAgICAgZm9yKHZhciBpIGluIGVsZW1lbnRzKSB7CiAgICAgICAgICBmb3IodmFyIGogaW4gZXZlbnROYW1lcykgewogICAgICAgICAgICB2YXIgbmFtZSA9ICdvbicgKyBldmVudE5hbWVzW2pdOwogICAgICAgICAgICBpZihlbGVtZW50c1tpXVtuYW1lXSAhPT0gbnVsbCAmJiBlbGVtZW50c1tpXVtuYW1lXSAhPT0gb254eHgpIHsKICAgICAgICAgICAgICAgIGlmKHVuaG9va19ldmVudE5hbWVzLmluZGV4T2YoZXZlbnROYW1lc1tqXSkgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzW2ldW3N0b3JhZ2VOYW1lICsgbmFtZV0gPSBlbGVtZW50c1tpXVtuYW1lXTsKICAgICAgICAgICAgICAgICAgICBlbGVtZW50c1tpXVtuYW1lXSA9IG9ueHh4OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNbaV1bbmFtZV0gPSBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgLy8g6L+U5ZuedHJ1ZeeahOWHveaVsAogICAgZnVuY3Rpb24gcmV0dXJuVHJ1ZShlKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiB1bmhvb2tfdChlKSB7CiAgICAgICAgcmV0dXJuIHVuaG9vayhlLCB0aGlzLCBzdG9yYWdlTmFtZSArIGUudHlwZSArICd0Jyk7CiAgICB9CiAgICBmdW5jdGlvbiB1bmhvb2tfZihlKSB7CiAgICAgICAgcmV0dXJuIHVuaG9vayhlLCB0aGlzLCBzdG9yYWdlTmFtZSArIGUudHlwZSArICdmJyk7CiAgICB9CiAgICBmdW5jdGlvbiB1bmhvb2soZSwgc2VsZiwgZnVuY3NOYW1lKSB7CiAgICAgICAgdmFyIGxpc3QgPSBzZWxmW2Z1bmNzTmFtZV07CiAgICAgICAgZm9yKHZhciBpIGluIGxpc3QpIHsKICAgICAgICAgICAgbGlzdFtpXShlKTsKICAgICAgICB9CgogICAgICAgIGUucmV0dXJuVmFsdWUgPSB0cnVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgZnVuY3Rpb24gb254eHgoZSkgewogICAgICAgIHZhciBuYW1lID0gc3RvcmFnZU5hbWUgKyAnb24nICsgZS50eXBlOwogICAgICAgIHRoaXNbbmFtZV0oZSk7CgogICAgICAgIGUucmV0dXJuVmFsdWUgPSB0cnVlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAvLyDojrflj5bpmo/mnLrlrZfnrKbkuLIKICAgIGZ1bmN0aW9uIGdldFJhbmRTdHIoY2hzLCBsZW4pIHsKICAgICAgICB2YXIgc3RyID0gJyc7CgogICAgICAgIHdoaWxlKGxlbi0tKSB7CiAgICAgICAgICAgIHN0ciArPSBjaHNbcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIGNocy5sZW5ndGgpXTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzdHI7CiAgICB9CgogIC8vIOiOt+WPluaJgOacieWFg+e0oCDljIXmi6xkb2N1bWVudAogICAgZnVuY3Rpb24gZ2V0RWxlbWVudHMoKSB7CiAgICAgICAgdmFyIGVsZW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKSk7CiAgICAgICAgLy8gdmFyIGVsZW1lbnRzQXJyID0gQXJyYXkuZnJvbShlbGVtZW50cyk7CiAgICAgICAgdmFyIGVsZW1lbnRzU2V0ID0gbmV3IFNldChlbGVtZW50cyk7CgogICAgICAgIC8vIGNvbnNvbGUubG9nKCLmiYDmnInlhYPntKDvvJoiLGVsZW1lbnRzKTsKICAgICAgICB2YXIgZXhlbXB0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiW2NsYXNzKj0ncndsLWV4ZW1wdCddLFtjbGFzcyo9J3J3bC1leGVtcHQnXSAqIikpOwogICAgICAgIC8vIGNvbnNvbGUubG9nKCLmjpLpmaQx77yaIixleGVtcHQpOwoKICAgICAgICAvLyB2YXIgZXhlbXB0QXJyID0gQXJyYXkuZnJvbShleGVtcHQpOwogICAgICAgIHZhciBleGVtcHRTZXQgPSBuZXcgU2V0KGV4ZW1wdCk7CgogICAgICAgIC8vIGNvbnNvbGUubG9nKCLmjpLpmaTlhYPntKDvvJsiLGV4ZW1wdCk7CgogICAgICAgIGVsZW1lbnRzID0gQXJyYXkuZnJvbShuZXcgU2V0KGVsZW1lbnRzLmNvbmNhdChleGVtcHQpLmZpbHRlcih2ID0+ICFlbGVtZW50c1NldC5oYXModikgfHwgIWV4ZW1wdFNldC5oYXModikpKSkKICAgICAgICBlbGVtZW50cy5wdXNoKGRvY3VtZW50KTsKICAgICAgICAvLyBjb25zb2xlLmxvZygi5pyA5ZCO57uT5p6c77yaIixlbGVtZW50cyk7CgogICAgICAgIHJldHVybiBlbGVtZW50czsKICAgIH0KCgogIC8v5re75Yqg5oyJ6ZKuCiAgICBmdW5jdGlvbiBhZGRCdG4oKXsKICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInJlbW92ZS13ZWItbGltaXRzLWlxeGluIik7CiAgICAgICAgbm9kZS5pZCA9ICJyd2wtaXF4aW4iOwogICAgICAgIG5vZGUuY2xhc3NOYW1lID0gInJ3bC1leGVtcHQiOwogICAgICAgIC8vIG5vZGUuaW5uZXJIVE1MID0gJzxsYWJlbD48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9IiIgaWQ9ImJsYWNrX25vZGUiPum7keWQjeWNlTwvbGFiZWw+PGJ1dHRvbiBpZD0iZGVsZXRlIj5kZWxldGU8L2J0dG9uPic7CiAgICAgICAgbm9kZS5pbm5lckhUTUwgPSAnPGxhYmVsPumZkOWItuino+mZpCA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9IiIgaWQ9ImJsYWNrX25vZGUiPjwvbGFiZWw+JzsKICAgICAgICBpZih3aW5kb3cuc2VsZiA9PT0gd2luZG93LnRvcCl7CiAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJib2R5IikpewogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsZnVuY3Rpb24oKXsKICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKCJyd2wtYWN0aXZlLWlxeGluIik7CiAgICAgICAgICAgIC8vIGxpc3QgPSBnZXRfYmxhY2tfbGlzdCgpOwogICAgICAgIH0pOwogICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VsZWF2ZSIsZnVuY3Rpb24oKXsKICAgICAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKCJyd2wtYWN0aXZlLWlxeGluIik7CiAgICAgICAgICAgIGJsYWNrX2NoZWNrKGJsYWNrX25vZGUuY2hlY2tlZCk7CiAgICAgICAgfSk7CiAgICAgICAgLy8g5Yig6Zmk5pys5Zyw5a2Y55qE6buR5ZCN5Y2VCiAgICAgICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRlbGV0ZSIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIixmdW5jdGlvbigpewogICAgICAgIC8vICBHTV9kZWxldGVWYWx1ZSAoImxpc3RfdXNlciIpOwogICAgICAgIC8vICB0ZXN0KCk7CiAgICAgICAgLy8gfSk7IAogICAgICAgIEdNX2FkZFN0eWxlKAogICAgICAgICAgICAiI3J3bC1pcXhpbnsiICsKICAgICAgICAgICAgICAgICJwb3NpdGlvbjpmaXhlZDsiICsKICAgICAgICAgICAgICAgICJ0b3A6MDsiICsKICAgICAgICAgICAgICAgICJsZWZ0Oi02MnB4OyIgKwogICAgICAgICAgICAgICAgIndpZHRoOjU4cHg7IiArCiAgICAgICAgICAgICAgICAiaGVpZ2h0OjI1cHg7IiArCiAgICAgICAgICAgICAgICAiZm9udC1zaXplOjEycHg7IiArCiAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQ6IDUwMDsiICsKICAgICAgICAgICAgICAgICJmb250LWZhbWlseTpWZXJkYW5hLCBBcmlhbCwgJ+Wui+S9kyc7IiArCiAgICAgICAgICAgICAgICAiY29sb3I6I2ZmZjsiICsKICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kOiMzMzM7IiArCiAgICAgICAgICAgICAgICAiei1pbmRleDoyMTQ3NDgzNjQ3OyIgKwogICAgICAgICAgICAgICAgIm1hcmdpbjogMDsiICsKICAgICAgICAgICAgICAgICJvcGFjaXR5OjAuMDU7IiArCiAgICAgICAgICAgICAgICAidHJhbnNpdGlvbjowLjNzOyIgKwogICAgICAgICAgICAgICAgIm92ZXJmbG93OmhpZGRlbjsiICsKICAgICAgICAgICAgICAgICJ1c2VyLXNlbGVjdDpub25lOyIgKwogICAgICAgICAgICAgICAgInRleHQtYWxpZ246Y2VudGVyOyIgKwogICAgICAgICAgICAgICAgIndoaXRlLXNwYWNlOm5vd3JhcDsiICsKICAgICAgICAgICAgICAgICJsaW5lLWhlaWdodDoyNXB4OyIgKwogICAgICAgICAgICAgICAgInBhZGRpbmc6MCAxNnB4OyIgKwogICAgICAgICAgICAgICAgImJvcmRlcjoxcHggc29saWQgI2NjYzsiICsKICAgICAgICAgICAgICAgICJib3JkZXItd2lkdGg6MXB4IDFweCAxcHggMDsiICsKICAgICAgICAgICAgICAgICJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czo1cHg7IiArCiAgICAgICAgICAgICAgICAiYm94LXNpemluZzogY29udGVudC1ib3g7IiArCiAgICAgICAgICAgICJ9IiArCiAgICAgICAgICAgICIjcndsLWlxeGluIGlucHV0eyIgKwogICAgICAgICAgICAgICAgIm1hcmdpbjogMDsiICsKICAgICAgICAgICAgICAgICJwYWRkaW5nOiAwOyIgKwogICAgICAgICAgICAgICAgInZlcnRpY2FsLWFsaWduOm1pZGRsZTsiICsKICAgICAgICAgICAgICAgICItd2Via2l0LWFwcGVhcmFuY2U6Y2hlY2tib3g7IiArCiAgICAgICAgICAgICAgICAiLW1vei1hcHBlYXJhbmNlOmNoZWNrYm94OyIgKwogICAgICAgICAgICAgICAgInBvc2l0aW9uOiBzdGF0aWM7IiArCiAgICAgICAgICAgICAgICAiY2xpcDogYXV0bzsiICsKICAgICAgICAgICAgICAgICJvcGFjaXR5OiAxOyIgKwogICAgICAgICAgICAifSIgKwogICAgICAgICAgICAiI3J3bC1pcXhpbi5yd2wtYWN0aXZlLWlxeGlueyIgKwogICAgICAgICAgICAgICAgInRvcDogMTBweDsiICsKICAgICAgICAgICAgICAgICJsZWZ0OiAwcHg7IiArCiAgICAgICAgICAgICAgICAib3BhY2l0eTogMC45OyIgKwogICAgICAgICAgICAgICAgImhlaWdodDogMzJweDsiICsKICAgICAgICAgICAgICAgICJsaW5lLWhlaWdodDogMzJweCIgKwogICAgICAgICAgICAifSIgKwogICAgICAgICAgICAiI3J3bC1pcXhpbiBsYWJlbHsiICsKICAgICAgICAgICAgICAgICJtYXJnaW46MDsiICsKICAgICAgICAgICAgICAgICJwYWRkaW5nOjA7IiArCiAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQ6NTAwOyIgKwogICAgICAgICAgICAifSIKICAgICAgICApOwogICAgfTsKCiAgICAvLyDpg6jliIbnvZHnq5nph4fnlKjkuoblhbbku5bnmoTpmLLlpI3liLbmiYvmrrUKICAgIGZ1bmN0aW9uIGNsZWFyKCl7CiAgICAgICAgLy8gY29uc29sZS5sb2coaG9zdG5hbWUpOwogICAgICAgIHN3aXRjaCAoaG9zdG5hbWUpewogICAgICAgICAgICBjYXNlICJ3d3cuejN6NC5jb20iOiBjbGVhcl96M3o0KCk7IGJyZWFrOwogICAgICAgICAgICBjYXNlICJodWF5dS5iYWlkdS5jb20iOiBjbGVhcl9odWF5dSgpOyBicmVhazsKICAgICAgICAgICAgLy8gY2FzZSAibmV3cy5pZmVuZy5jb20iOgogICAgICAgICAgICAvLyBjYXNlICJ3d3cuMTV5YW4uY29tIjogcnVsZSA9IGNsZWFyXzE1eWFuKCk7YnJlYWs7CiAgICAgICAgfQogICAgICAgIHJldHVybiBydWxlcy5ydWxlX3BsdXM7CiAgICB9CiAgICAvLyB3d3cuejN6NC5jb20g5YaN5LiJ5YaN5ZubLCDmloflrZfkuIrpnaLopobnm5bkuIDlsYLpgI/mmI7nmoRkaXYKICAgIGZ1bmN0aW9uIGNsZWFyX3ozejQoKXsKICAgICAgICB2YXIgb0RpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5tb3ZpZWRvd25hZGRpdiIpOwogICAgICAgIGlmIChvRGl2KSB7CiAgICAgICAgICAgIG9EaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvRGl2KTsKICAgICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBjbGVhcl9odWF5dSgpewogICAgICAgIHZhciBvRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2pxQ29udGV4dE1lbnUiKTsKICAgICAgICBpZiAob0RpdikgewogICAgICAgICAgICBvRGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob0Rpdik7CiAgICAgICAgfQogICAgfQogICAgLy8gd3d3LjE1eWFuLmNvbSAxNeiogO+8jCDnm5HmjqcgbW91c2Vkb3duCiAgICBmdW5jdGlvbiBjbGVhcl8xNXlhbigpewogICAgICAgIHJldHVybiBydWxlcy5ydWxlX3BsdXM7CiAgICB9CgoKICAgIC8vIOWIneWni+WMlgogICAgZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgICAvLyBjb25zb2xlLmxvZygi5L2/55So6KeE5YiZLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWlxeGluIik7CiAgICAgICAgLy8g6ZKI5a+55Liq5Yir572R56uZ6YeH5Y+W5LiN5ZCM55qE562W55WlCiAgICAgICAgdmFyIHJ1bGUgPSBjbGVhcigpOwogICAgICAgIC8vIOiuvue9riBldmVudCDliJfooagKICAgICAgICBob29rX2V2ZW50TmFtZXMgPSBydWxlLmhvb2tfZXZlbnROYW1lcy5zcGxpdCgifCIpOwogICAgICAgIC8vIFRPRE8gQWxsb3dlZCB0byByZXR1cm4gdmFsdWUKICAgICAgICB1bmhvb2tfZXZlbnROYW1lcyA9IHJ1bGUudW5ob29rX2V2ZW50TmFtZXMuc3BsaXQoInwiKTsKICAgICAgICBldmVudE5hbWVzID0gaG9va19ldmVudE5hbWVzLmNvbmNhdCh1bmhvb2tfZXZlbnROYW1lcyk7CgogICAgICAgIC8vIOiwg+eUqOa4heeQhiBET00wIGV2ZW50IOaWueazleeahOW+queOrwogICAgICAgIGlmKHJ1bGUuZG9tMCkgewogICAgICAgICAgICBzZXRJbnRlcnZhbChjbGVhckxvb3AsIDMwICogMTAwMCk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoY2xlYXJMb29wLCAyNTAwKTsKICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBjbGVhckxvb3AsIHRydWUpOwogICAgICAgICAgICBjbGVhckxvb3AoKTsKICAgICAgICB9CgogICAgICAgIC8vIGhvb2sgYWRkRXZlbnRMaXN0ZW5lcgogICAgICAgIGlmKHJ1bGUuaG9va19hZGRFdmVudExpc3RlbmVyKSB7CiAgICAgICAgICAgIEV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gYWRkRXZlbnRMaXN0ZW5lcjsKICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciA9IGFkZEV2ZW50TGlzdGVuZXI7CiAgICAgICAgfQoKICAgICAgICAvLyBob29rIHByZXZlbnREZWZhdWx0CiAgICAgICAgaWYocnVsZS5ob29rX3ByZXZlbnREZWZhdWx0KSB7CiAgICAgICAgICAgIEV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYoZXZlbnROYW1lcy5pbmRleE9mKHRoaXMudHlwZSkgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgRXZlbnRfcHJldmVudERlZmF1bHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIC8vIEhvb2sgc2V0IHJldHVyblZhbHVlCiAgICAgICAgaWYocnVsZS5ob29rX3NldF9yZXR1cm5WYWx1ZSkgewogICAgICAgICAgICBFdmVudC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXygncmV0dXJuVmFsdWUnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmKHRoaXMucmV0dXJuVmFsdWUgIT09IHRydWUgJiYgZXZlbnROYW1lcy5pbmRleE9mKHRoaXMudHlwZSkgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMucmV0dXJuVmFsdWUgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgLy8gY29uc29sZS5kZWJ1ZygndXJsOiAnICsgdXJsLCAnc3RvcmFnZU5hbWXvvJonICsgc3RvcmFnZU5hbWUsICdydWxlOiAnICsgcnVsZS5uYW1lKTsKCiAgICAvLyDmt7vliqBDU1MKICAgICAgICBpZihydWxlLmFkZF9jc3MpIHsKICAgICAgICAgICAgR01fYWRkU3R5bGUoJ2h0bWwsIDpub3QoW2NsYXNzKj0icndsLWV4ZW1wdCJdKSB7LXdlYmtpdC11c2VyLXNlbGVjdDp0ZXh0IWltcG9ydGFudDsgLW1vei11c2VyLXNlbGVjdDp0ZXh0IWltcG9ydGFudDt9Jyk7CiAgICAgICAgfQoKICAgIH0KCi8vLS3lvIDlp4vmiafooYwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1pcXhpbgogICAgCiAgICB2YXIgYmxhY2tfbGlzdF92ZXJzaW9uID0gMS4xOwogICAgdmFyIGJsYWNrX2xpc3RfZGVmYXVsdCA9IFsKICAgICAgICAiYi5mYWxvby5jb20iLAogICAgICAgICJib29rLnpodWxhbmcuY29tIiwKICAgICAgICAiYm9vay56b25naGVuZy5jb20iLAogICAgICAgICJjaG9rc3RpY2suY29tIiwKICAgICAgICAiY3V0ZWxpc2E1NS5waXhuZXQubmV0IiwKICAgICAgICAiaHVheXUuYmFpZHUuY29tIiwKICAgICAgICAiaW1hYy5oayIsCiAgICAgICAgImxpZmUudHciLAogICAgICAgICJuZXdzLm1pc3NldmFuLmNvbSIsCiAgICAgICAgInJlYWQucWlkaWFuLmNvbSIsCiAgICAgICAgInd3dy4xNXlhbi5jb20iLAogICAgICAgICJ3d3cuMTdrLmNvbSIsCiAgICAgICAgInd3dy4xODE4My5jb20iLAogICAgICAgICJ3d3cuMzYwZG9jLmNvbSIsCiAgICAgICAgInd3dy5jb2NvMDEubmV0IiwKICAgICAgICAid3d3LmV5dS5jb20iLAogICAgICAgICJ3d3cuaG9uZ3NodS5jb20iLAogICAgICAgICJ3d3cuaG9uZ3hpdS5jb20iLAogICAgICAgICJ3d3cuamp3eGMubmV0IiwKICAgICAgICAid3d3LnJlYWRub3ZlbC5jb20iLAogICAgICAgICJ3d3cudGFkdS5jb20iLAogICAgICAgICJ3d3cueHhzeS5uZXQiLAogICAgICAgICJ3d3cuejN6NC5jb20iLAogICAgICAgICJ3d3cuemhpaHUuY29tIiwKICAgICAgICAieXVlZHUuMTYzLmNvbSIsCiAgICAgICAgImJvb2suaGpzbS50b20uY29tIiwKICAgICAgICAiY2h1YW5nc2hpLnFxLmNvbSIKICAgIF07CgogICAgYWRkQnRuKCk7ICAgLy/pobXpnaLlt6bkuIrop5LmjInpkq7vvIzkuI3mg7PopoHmjInpkq7lj6/ku6Xmiorov5nooYzms6jph4rmjokKICAgIHZhciBibGFja19ub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJsYWNrX25vZGUiKTsKCiAgICB2YXIgbGlzdCA9IGdldF9ibGFja19saXN0KCk7CgogICAgdmFyIGhvc3RuYW1lID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lOyAKICAgIGlmKGNoZWNrX2JsYWNrX2xpc3QobGlzdCxob3N0bmFtZSkpewogICAgICAgIC8vIOWmguaenOazqOmHiuaOieaMiemSru+8jOatpOWkhOS8muiOt+WPluS4jeWIsAogICAgICAgIGlmKGJsYWNrX25vZGUpewogICAgICAgICAgICBibGFja19ub2RlLmNoZWNrZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgICAvL2NvbnNvbGUubG9nKCLkvY3kuo7pu5HlkI3ljZXkuK0tLS0tLS0tLS0tLS0tLS0tcmV2b3ZlX3dlYl9saW1pdHMtLS0tLS1pcXhpbiIpOwogICAgICAgIGluaXQoKTsKICAgIH0KfSkoKTs="},{"name":"bilibili merged flv+mp4+ass+enhance","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://www.bilibili.com/video/av*","https://www.bilibili.com/video/av*","http://bangumi.bilibili.com/anime/*/play*","https://bangumi.bilibili.com/anime/*/play*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-begin","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1498965419488,"data":{}},"enabled":false,"position":25,"file_url":"https://greasyfork.org/scripts/27819-bilibili-merged-flv-mp4-ass-enhance/code/bilibili%20merged%20flv+mp4+ass+enhance.user.js","uuid":"95acdcf7-7cfb-4aa1-aca0-c1a608379e92","source":""},{"name":"giveaway.su","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["steamcommunity.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://giveaway.su/giveaway/view/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1502855478271,"data":{}},"enabled":true,"position":26,"file_url":"https://gist.githubusercontent.com/kaoyusu/ecda3826c7e1a696b785f729715a5e22/raw/giveaway_su.user.js","uuid":"7a456377-335f-4378-b2df-a4ac85deb52d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBnaXZlYXdheS5zdQovLyBAdmVyc2lvbiAgICAgIDAuNi4yCi8vIEBhdXRob3IgICAgICAgS2FveXUKLy8gQHJlcXVpcmUgICAgICBodHRwczovL2Nkbi5ib290Y3NzLmNvbS9qcXVlcnkvMy4yLjEvanF1ZXJ5Lm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLmJvb3Rjc3MuY29tL2JsdWVpbXAtbWQ1LzIuNy4wL2pzL21kNS5taW4uanMKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdmVhd2F5LnN1L2dpdmVhd2F5L3ZpZXcvKgovLyBAZG93bmxvYWRVUkwgIGh0dHBzOi8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20va2FveXVzdS9lY2RhMzgyNmM3ZTFhNjk2Yjc4NWY3Mjk3MTVhNWUyMi9yYXcvZ2l2ZWF3YXlfc3UudXNlci5qcwovLyBAdXBkYXRlVVJMICAgIGh0dHBzOi8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20va2FveXVzdS9lY2RhMzgyNmM3ZTFhNjk2Yjc4NWY3Mjk3MTVhNWUyMi9yYXcvZ2l2ZWF3YXlfc3UudXNlci5qcwovLyBAY29ubmVjdCAgICAgIHN0ZWFtY29tbXVuaXR5LmNvbQovLyBAZ3JhbnQgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vID09L1VzZXJTY3JpcHQ9PQoKLy8g6L+Z6YeM5L+u5pS55omp5bGV5a+55bqU54mI5pys5Y+3CnZhciBleHRlbnNpb25WZXJzaW9uID0gIjMuNC45IjsKCnZhciBjaGVja3MgPSBbXTsKdmFyIGNoZWNrR3JvdXAgPSBmdW5jdGlvbihidXR0b24sIGlzT3BlbikgewogICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgdXJsOiAiaHR0cDovL3N0ZWFtY29tbXVuaXR5LmNvbS9wcm9maWxlcy8iKyQoImFzaWRlW2RhdGEtc3RlYW0taWRdIikuZGF0YSgic3RlYW0taWQiKSsiL2dyb3Vwcy8iLAogICAgICAgIG9ubG9hZDogZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCJocmVmPVwiamF2YXNjcmlwdDpsZWF2ZUdyb3VwUHJvbXB0XFwoJyIrJChidXR0b24pLmRhdGEoImNoZWNrIikrIicsIiwgImciKTsKICAgICAgICAgICAgaWYgKHJlZ2V4cC50ZXN0KHJlc3BvbnNlLnJlc3BvbnNlVGV4dCkpIHsKICAgICAgICAgICAgICAgICQoYnV0dG9uKS50b2dnbGVDbGFzcygiYnRuLWRlZmF1bHQgYnRuLXN1Y2Nlc3MiKS5wcm9wKCJkaXNhYmxlZCIsICJkaXNhYmxlZCIpLmZpbmQoImkuZ2x5cGhpY29uLXJlZnJlc2giKS50b2dnbGVDbGFzcygiZ2x5cGhpY29uLXJlZnJlc2ggZ2x5cGhpY29uLW9rIik7CiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBjaGVja3MuaW5kZXhPZihidXR0b24pOwogICAgICAgICAgICAgICAgaWYoaW5kZXggPiAtMSkKICAgICAgICAgICAgICAgICAgICBjaGVja3Muc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNoZWNrcy5wdXNoKGJ1dHRvbik7CiAgICAgICAgICAgICAgICBpZihpc09wZW4pCiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oImh0dHBzOi8vc3RlYW1jb21tdW5pdHkuY29tL2dpZC8iKyQoYnV0dG9uKS5kYXRhKCJjaGVjayIpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwp9Owp2YXIgY2hlY2tHcmVlbmxpZ2h0ID0gZnVuY3Rpb24oYnV0dG9uLCBpc09wZW4pewogICAgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgdXJsOiAiaHR0cHM6Ly9zdGVhbWNvbW11bml0eS5jb20vc2hhcmVkZmlsZXMvZmlsZWRldGFpbHMvP2lkPSIrJCh0aGlzKS5kYXRhKCJjaGVjayIpLAogICAgICAgIG9ubG9hZDogZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIGlmICgoL3RvZ2dsZWQiIGlkPSJWb3RlVXBCdG4iIG9uY2xpY2s9IlZvdGVVcFwoLykudGVzdChyZXNwb25zZS5yZXNwb25zZVRleHQpKSB7CiAgICAgICAgICAgICAgICAkKGJ1dHRvbikudG9nZ2xlQ2xhc3MoImJ0bi1kZWZhdWx0IGJ0bi1zdWNjZXNzIikucHJvcCgiZGlzYWJsZWQiLCAiZGlzYWJsZWQiKS5maW5kKCJpLmdseXBoaWNvbi1yZWZyZXNoIikudG9nZ2xlQ2xhc3MoImdseXBoaWNvbi1yZWZyZXNoIGdseXBoaWNvbi1vayIpOwogICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gY2hlY2tzLmluZGV4T2YoYnV0dG9uKTsKICAgICAgICAgICAgICAgIGlmKGluZGV4ID4gLTEpCiAgICAgICAgICAgICAgICAgICAgY2hlY2tzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjaGVja3MucHVzaChidXR0b24pOwogICAgICAgICAgICAgICAgaWYoaXNPcGVuKQogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKCJodHRwczovL3N0ZWFtY29tbXVuaXR5LmNvbS9zaGFyZWRmaWxlcy9maWxlZGV0YWlscy8/aWQ9IiskKGJ1dHRvbikuZGF0YSgiY2hlY2siKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKfTsKaWYgKCQoImFydGljbGUgLmV4dGVuc2lvbiIpLmxlbmd0aCkgewogICAgJCgiYXJ0aWNsZSAuZXh0ZW5zaW9uIikuYWRkQ2xhc3MoImluc3RhbGxlZCIpOwogICAgdmFyIHRpbWVzdGFtcCA9ICQoImFydGljbGUgLmV4dGVuc2lvbiIpLmRhdGEoInRpbWVzdGFtcCIpOwogICAgdmFyIGNzcmYgPSAkKCJhcnRpY2xlIC5leHRlbnNpb24iKS5kYXRhKCJjc3JmIik7CiAgICB2YXIgZXh0ZW5zaW9uID0gbWQ1KHRpbWVzdGFtcCsiIitjc3JmKTsKICAgIHZhciBzZWNyZXQgPSAkKCJhcnRpY2xlIC5leHRlbnNpb24iKS5kYXRhKCJzZWNyZXQiKTsKICAgICQuZ2V0KHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSsiP2V4dGVuc2lvbj0iK2V4dGVuc2lvbisiJnRpbWVzdGFtcD0iK3RpbWVzdGFtcCsiJmNzcmY9Iitjc3JmKyhzZWNyZXQgPyAiJnNlY3JldD0iK3NlY3JldCA6ICIiKSwgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAkKHdpbmRvdykuZm9jdXMoZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIHRtcEFycmF5ID0gY2hlY2tzLnNsaWNlKCk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG1wQXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSB0bXBBcnJheVtpXTsKICAgICAgICAgICAgICAgIHZhciB0eXBlID0gJChidXR0b24pLmRhdGEoInR5cGUiKTsKICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gInN0ZWFtLmdyb3VwIikKICAgICAgICAgICAgICAgICAgICBjaGVja0dyb3VwKGJ1dHRvbik7CiAgICAgICAgICAgICAgICBlbHNlIGlmKHR5cGUgPT0gInN0ZWFtLmdyZWVubGlnaHQiKQogICAgICAgICAgICAgICAgICAgIGNoZWNrR3JlZW5saWdodChidXR0b24pOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgJCgiYXJ0aWNsZSIpLnJlcGxhY2VXaXRoKHJlc3BvbnNlKTsKICAgICAgICAkKCJhcnRpY2xlIikuYXR0cigiZXh0ZW5zaW9uLXZlcnNpb24iLCAiY2hyb21lLSIrZXh0ZW5zaW9uVmVyc2lvbik7CiAgICAgICAgJCgiYVtocmVmKj0nYWN0aW9uL3JlZGlyZWN0J10iKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZigkKHRoaXMpLmRhdGEoInR5cGUiKSA9PSAidHJpZ2dlciIpIHsKICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSAkKHRoaXMpLmNsb3Nlc3QoInRyIikuZmluZCgiYnV0dG9uLmJ0bi1kZWZhdWx0W2RhdGEtdHlwZT0nbGluayddIik7CiAgICAgICAgICAgICAgICBidXR0b24uYXBwZW5kKCLpk77mjqUiKTsKICAgICAgICAgICAgICAgICQuZ2V0KHRoaXMuaHJlZikuYWx3YXlzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKCJidG4tZGVmYXVsdCBidG4tc3VjY2VzcyIpLnByb3AoImRpc2FibGVkIiwgImRpc2FibGVkIikuZmluZCgiaS5nbHlwaGljb24tcmVmcmVzaCIpLnRvZ2dsZUNsYXNzKCJnbHlwaGljb24tcmVmcmVzaCBnbHlwaGljb24tb2siKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYoJCh0aGlzKS5kYXRhKCJ0eXBlIikgPT0gInZrLmNsdWIiKSB7CiAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gJCh0aGlzKS5jbG9zZXN0KCJ0ciIpLmZpbmQoImJ1dHRvbi5idG4tZGVmYXVsdFtkYXRhLXR5cGU9J3ZrLmNsdWInXSIpOwogICAgICAgICAgICAgICAgYnV0dG9uLmFwcGVuZCgiVksiKTsKICAgICAgICAgICAgICAgICQuZ2V0KHRoaXMuaHJlZikuYWx3YXlzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKCJidG4tZGVmYXVsdCBidG4tc3VjY2VzcyIpLnByb3AoImRpc2FibGVkIiwgImRpc2FibGVkIikuZmluZCgiaS5nbHlwaGljb24tcmVmcmVzaCIpLnRvZ2dsZUNsYXNzKCJnbHlwaGljb24tcmVmcmVzaCBnbHlwaGljb24tb2siKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UKICAgICAgICAgICAgICAgICQuZ2V0KHRoaXMuaHJlZikuYWx3YXlzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgICAgJCgiYnV0dG9uW2RhdGEtdHlwZT0nc3RlYW0uZ3JlZW5saWdodCddIikuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5hcHBlbmQoIue7v+WFiSIpOwogICAgICAgICAgICBjaGVja0dyZWVubGlnaHQodGhpcyk7CiAgICAgICAgICAgICQodGhpcykuY2xpY2soZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgY2hlY2tHcmVlbmxpZ2h0KHRoaXMsIHRydWUpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICAkKCJidXR0b25bZGF0YS10eXBlPSdzdGVhbS5ncm91cCddIikuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgdGhpcy5hcHBlbmQoIue7hCIpOwogICAgICAgICAgICBjaGVja0dyb3VwKHRoaXMpOwogICAgICAgICAgICAkKHRoaXMpLmNsaWNrKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGNoZWNrR3JvdXAodGhpcywgdHJ1ZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIHZhciBidXR0b24gPSAkKCIjZ2V0S2V5IGEiKTsKICAgICAgICB2YXIgYWN0aW9ucyA9IDA7CiAgICAgICAgJCgiI2FjdGlvbnMgW2RhdGEtYWN0aW9uLWlkXSIpLmVhY2goZnVuY3Rpb24oaSxlbCl7CiAgICAgICAgICAgIGFjdGlvbnMgKz0gcGFyc2VJbnQoJChlbCkuZGF0YSgiYWN0aW9uLWlkIikpOwogICAgICAgIH0pOwogICAgICAgICQoYnV0dG9uKS5hdHRyKCJocmVmIiwgJChidXR0b24pLmF0dHIoImhyZWYiKSsiJmFjdGlvbnM9IittZDUoYWN0aW9ucykpLnJlbW92ZUNsYXNzKCJkaXNhYmxlZCIpOwogICAgfSk7Cn0="}]}